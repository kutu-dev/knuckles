{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#knuckles","title":"Knuckles","text":"<p>An unopinionated OpenSubsonic API wrapper for Python.</p>"},{"location":"#compatiblity","title":"Compatiblity","text":"<p>Knuckles only works with servers compatible with the REST API version 1.4.0 onwards (Subsonic 4.2+). It follows strictly the OpenSubsonic API Spec, being fully retro-compatible with the original Subsonic API.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#make-it-available","title":"Make It Available","text":"<p>First install the package:</p> Command line<pre><code>python3 -m pip install knuckles\n</code></pre> <p>Or add it to your project:</p> pyproject.toml<pre><code>project = [\n    \"knuckles&gt;=1.1.0\"\n]\n</code></pre>"},{"location":"#using-it","title":"Using It","text":"__main__.py<pre><code>import knuckles\n\nserver = knuckles.Subsonic(\n    # Adding https:// is done automatically,\n    # /rest should never be added to the URL\n    url = \"example.com\",\n    user = \"kutu\",\n    password = \"caisopea\",\n    client = \"knuckles client\"\n)\n\nping = server.system.ping()\n\n# Print the supported version of the OpenSubsonic REST API\nprint(ping.version)\n</code></pre>"},{"location":"#learning-more","title":"Learning More","text":"<p>To start making more complex interactions with the API make use of the API reference. Enjoy coding and good luck!</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Created with  by Jorge \"Kutu\" Dob\u00f3n Blanco.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>Add missing project links.</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Official stable release.</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<ul> <li>PyPI automatic upload with GitHub release test.</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>PyPI automatic CI update upload test.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Any contribution is welcomed, don't be ashamed to send them!</p>"},{"location":"contributing/#reporting","title":"Reporting","text":"<p>If you see any undesired behaviour, mismatches with the OpenSubsonic API Spec or any sort of bug, please report them at the issue tracker.</p>"},{"location":"contributing/#development","title":"Development","text":""},{"location":"contributing/#the-toolchain","title":"The Toolchain","text":"<p>To start making development contribution you will need the <code>just</code> command (installation info at its manual) and Python 3.11.0 (you can set it with pyenv).</p> <p>Then you should be able to spin up the development environment: Command Line<pre><code>just setup\n</code></pre> You can now run the test suit, check if you will the pass the CI check (and fix everything that can be done automatically) and spin up a docs instance with ease: Command Line<pre><code>just test\njust check\njust docs\n</code></pre></p> <p>A git pre-commit hook that will run <code>just check</code> at every commit and block it if something is wrong can be installed with: Command Line<pre><code>just install-hook\n</code></pre></p> <p>You can uninstall it with: Command Line<pre><code>just uninstall-hook\n</code></pre></p> <p>See more recipes with: Command Line<pre><code>just help\n</code></pre></p>"},{"location":"contributing/#the-project","title":"The Project","text":"<p>The project works around the OpenSubsonic API Spec, with models (at <code>src/knuckles/_models</code>) that tries to match the different responses request can make.</p> <p>The user access the API with the <code>Subsonic</code> object inside of it there are objects that acts as categories that roughly resembles the categories in the spec.</p> <p>Everything should be private using the leading underscore convention and exposed the public parts of the package with the <code>__init__.py</code> file using the <code>__all__</code> variable.</p> <p>Warning</p> <p>Making exceptions, methods or extra behaviour to support functionalities or bugs caused by non compliant server is not planned, nonetheless new generic systems to catch and avoid crashing in this situations are welcomed to be contributed.</p>"},{"location":"contributing/#notes","title":"Notes","text":"<p>Technical notes about unconventional decisions in the project:</p> <ul> <li>Some parts of the CI with GitHub Actions uses the <code>24.04</code> version of Ubuntu instead of the <code>latest</code> tag (currently at <code>22.04</code>), this is due to the <code>just</code> command only being available in this version onwards. This is also the reason why this jobs uses Python 3.11.9 as it has a more limited range of installable version with the <code>actions/setup-python</code> action.</li> <li>Unfortunately due to limitations with <code>mkdocstrings-python</code>, when documenting the attributes of a class (like with all the models) the times can be determined at runtime and needs to be retyped in the docstring.</li> </ul>"},{"location":"reference/Api/","title":"Api","text":""},{"location":"reference/Api/#knuckles._api.Api","title":"<code>Api(url, username, password, client, use_https=True, use_token=True, request_method=RequestMethod.GET)</code>","text":"<p>Class in charge of managing the access to the REST API of the OpenSubsonic server.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The base URL that points to the server, without the <code>/rest/</code> path.</p> required <code>username</code> <code>str</code> <p>The name of the user to login as in the API.</p> required <code>password</code> <code>str</code> <p>The password of the user to login as in the API.</p> required <code>client</code> <code>str</code> <p>The name of the client to report to the API.</p> required <code>use_https</code> <code>bool</code> <p>If HTTPS should be used.</p> <code>True</code> <code>use_token</code> <code>bool</code> <p>If the modern token based authentication should be used.</p> <code>True</code> <code>request_method</code> <code>RequestMethod</code> <p>If the requests should send the data as GET parameters or POST form data.</p> <code>GET</code> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_api.py</code> <pre><code>def __init__(\n    self,\n    url: str,\n    username: str,\n    password: str,\n    client: str,\n    use_https: bool = True,\n    use_token: bool = True,\n    request_method: RequestMethod = RequestMethod.GET,\n) -&gt; None:\n    \"\"\"Class in charge of managing the access to the REST API of\n    the OpenSubsonic server.\n\n    Args:\n        url: The base URL that points to the server,\n            **without** the `/rest/` path.\n        username: The name of the user to login as in the API.\n        password: The password of the user to login as in the API.\n        client: The name of the client to report to the API.\n        use_https:  If HTTPS should be used.\n        use_token: If the modern token based authentication should be used.\n        request_method: If the requests should send the data as\n            GET parameters or POST form data.\n    \"\"\"\n    pass\n\n    self.username = username\n    self.password = password\n    self.client = client\n    self.use_token = use_token\n    self.request_method = request_method\n\n    # Sanitize url and ensure the correct protocol is used\n    parsed_url: ParseResult = urlparse(url)\n\n    # If the user accidentally specifies a protocol the url goes to netloc instead\n    base_url: str = parsed_url.path if parsed_url.path != \"\" else parsed_url.netloc\n\n    if use_https:\n        self.url = f\"https://{base_url}\"\n    else:\n        self.url = f\"http://{base_url}\"\n</code></pre>"},{"location":"reference/Api/#knuckles._api.Api.generate_url","title":"<code>generate_url(endpoint, extra_params)</code>","text":"<p>Using the PreparedRequest object of the Requests request package generates a valid URL for any endpoint with a valid authentication parameter.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint to be appended in the URL, without the leading <code>/rest/</code>.</p> required <code>extra_params</code> <code>dict[str, Any]</code> <p>The extra parameters to be added to the URL.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A valid URL pointing to the desired endpoint and with the requested parameters, including the ones needed for authentication.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_api.py</code> <pre><code>def generate_url(self, endpoint: str, extra_params: dict[str, Any]) -&gt; str:\n    \"\"\"Using the PreparedRequest object of the Requests request package\n    generates a valid URL for any endpoint with\n    a valid authentication parameter.\n\n\n    Args:\n        endpoint: The endpoint to be appended in the URL, **without** the\n            leading `/rest/`.\n        extra_params: The extra parameters to be added to the URL.\n\n    Returns:\n        A valid URL pointing to the desired endpoint and with the\n            requested parameters, including the ones needed\n            for authentication.\n    \"\"\"\n\n    prepared_request = PreparedRequest()\n    prepared_request.prepare_url(\n        f\"{self.url}/rest/{endpoint}\", {**self._generate_params(extra_params)}\n    )\n\n    # Ignore the type error caused by the url parameter of prepared_request\n    # as the prepare_url method always set it to a string.\n    return prepared_request.url  # type: ignore [return-value]\n</code></pre>"},{"location":"reference/Api/#knuckles._api.Api.json_request","title":"<code>json_request(endpoint, extra_params=None)</code>","text":"<p>Makes a request to the OpenSubsonic server REST API and returns the data from the <code>subsonic_response</code> property. Should never be used with non-json compatible endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint to be appended in the URL, without the leading <code>/rest/</code>.</p> required <code>extra_params</code> <code>dict[str, Any] | None</code> <p>Extra parameters to the added to the request.</p> <code>None</code> <p>Raises:</p> Type Description <code>code_error</code> <p>Raise an error if the server reports and issue with the request in the form of a code error, the raised follows the form <code>CodeErrorXX</code> where <code>XX</code> is the raised code error. <code>UnknownCodeError</code> is raised if the error code is not part of the standard.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The data contained in the <code>subsonic_response</code> property.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_api.py</code> <pre><code>def json_request(\n    self, endpoint: str, extra_params: dict[str, Any] | None = None\n) -&gt; dict[str, Any]:\n    \"\"\"Makes a request to the OpenSubsonic server REST API and returns the\n    data from the `subsonic_response` property. Should **never** be used\n    with non-json compatible endpoints.\n\n    Args:\n        endpoint: The endpoint to be appended in the URL, **without** the\n            leading `/rest/`.\n        extra_params: Extra parameters to the added to the request.\n\n    Raises:\n        code_error: Raise an error if the server reports and issue with the\n            request in the form of a code error, the raised follows\n            the form `CodeErrorXX` where `XX` is the raised code error.\n            `UnknownCodeError` is raised if the error code\n            is not part of the standard.\n\n    Returns:\n        The data contained in the `subsonic_response` property.\n    \"\"\"\n\n    response = self.raw_request(endpoint, extra_params)\n\n    json_response: dict[str, Any] = response.json()[\"subsonic-response\"]\n\n    if json_response[\"status\"] == \"failed\":\n        code_error: ERROR_CODE_EXCEPTION = get_error_code_exception(\n            json_response[\"error\"][\"code\"]\n        )\n\n        raise code_error(json_response[\"error\"][\"message\"])\n\n    return json_response\n</code></pre>"},{"location":"reference/Api/#knuckles._api.Api.raw_request","title":"<code>raw_request(endpoint, extra_params=None)</code>","text":"<p>Makes a request to the OpenSubsonic server REST API.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint to be appended in the URL, without the leading <code>/rest/</code>.</p> required <code>extra_params</code> <code>dict[str, Any] | None</code> <p>Extra parameters to the added to the request.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>The <code>requests</code> <code>response</code> object of the executed request.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_api.py</code> <pre><code>def raw_request(\n    self, endpoint: str, extra_params: dict[str, Any] | None = None\n) -&gt; Response:\n    \"\"\"Makes a request to the OpenSubsonic server REST API.\n\n    Args:\n        endpoint: The endpoint to be appended in the URL, **without** the\n            leading `/rest/`.\n        extra_params: Extra parameters to the added to the request.\n\n    Returns:\n        The\n            [`requests`](https://docs.python-requests.org/en/latest/index.html)\n            `response` object of the executed request.\n    \"\"\"\n\n    match self.request_method:\n        case RequestMethod.POST:\n            return requests.post(\n                url=f\"{self.url}/rest/{endpoint}\",\n                data=self._generate_params(extra_params),\n            )\n\n        case RequestMethod.GET | _:\n            return requests.get(\n                url=f\"{self.url}/rest/{endpoint}\",\n                params=self._generate_params(extra_params),\n            )\n</code></pre>"},{"location":"reference/Bookmarks/","title":"Bookmarks","text":""},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks","title":"<code>Bookmarks(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the bookmark endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.create_bookmark","title":"<code>create_bookmark(song_or_video_id, position, comment=None)</code>","text":"<p>Creates a new bookmark for the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>song_or_video_id</code> <code>str</code> <p>The ID of the song or video to bookmark.</p> required <code>position</code> <code>int</code> <p>A position in milliseconds to be indicated with the song or video.</p> required <code>comment</code> <code>str | None</code> <p>A comment to be attached with the song or video.</p> <code>None</code> <p>Returns:</p> Type Description <code>Bookmark</code> <p>An object that contains all the info of the new created bookmark.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def create_bookmark(\n    self, song_or_video_id: str, position: int, comment: str | None = None\n) -&gt; Bookmark:\n    \"\"\"Creates a new bookmark for the authenticated user.\n\n    Args:\n        song_or_video_id: The ID of the song or video to bookmark.\n        position: A position in milliseconds to be indicated with the song\n            or video.\n        comment: A comment to be attached with the song or video.\n\n    Returns:\n        An object that contains all the info of the new created\n            bookmark.\n    \"\"\"\n\n    self.api.json_request(\n        \"createBookmark\",\n        {\"id\": song_or_video_id, \"position\": position, \"comment\": comment},\n    )\n\n    # Fake the song structure given by in the API.\n    return Bookmark(\n        self.subsonic, {\"id\": song_or_video_id}, position=position, comment=comment\n    )\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.delete_bookmark","title":"<code>delete_bookmark(song_or_video_id)</code>","text":"<p>Deletes a bookmark for the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>song_or_video_id</code> <code>str</code> <p>The ID of the song or video to delete its bookmark.</p> required <p>Returns:     The Subsonic object where this method was called to allow         method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def delete_bookmark(self, song_or_video_id: str) -&gt; \"Subsonic\":\n    \"\"\"Deletes a bookmark for the authenticated user.\n\n    Args:\n        song_or_video_id: The ID of the song or video to delete its\n            bookmark.\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n    self.api.json_request(\"deleteBookmark\", {\"id\": song_or_video_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.get_bookmark","title":"<code>get_bookmark(bookmark_id)</code>","text":"<p>Get all the info of a bookmark given its ID.</p> <p>Parameters:</p> Name Type Description Default <code>bookmark_id</code> <code>str</code> <p>The id of the bookmark to get.</p> required <p>Returns:</p> Type Description <code>Bookmark | None</code> <p>A object that contains all the info of the requested bookmark.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def get_bookmark(self, bookmark_id: str) -&gt; Bookmark | None:\n    \"\"\"Get all the info of a bookmark given its ID.\n\n    Args:\n        bookmark_id: The id of the bookmark to get.\n\n    Returns:\n        A object that contains all the info of the requested bookmark.\n    \"\"\"\n\n    bookmarks = self.get_bookmarks()\n\n    for bookmark in bookmarks:\n        if bookmark.song.id == bookmark_id:\n            return bookmark\n\n    return None\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.get_bookmarks","title":"<code>get_bookmarks()</code>","text":"<p>Get all the bookmarks created by the authenticated user.</p> <p>Returns:</p> Type Description <code>list[Bookmark]</code> <p>A list containing all the bookmarks for the authenticated user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def get_bookmarks(self) -&gt; list[Bookmark]:\n    \"\"\"Get all the bookmarks created by the authenticated user.\n\n    Returns:\n        A list containing all the bookmarks for the authenticated user.\n    \"\"\"\n\n    response = self.api.json_request(\"getBookmarks\")[\"bookmarks\"][\"bookmark\"]\n\n    return [Bookmark(self.subsonic, **bookmark) for bookmark in response]\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.get_play_queue","title":"<code>get_play_queue()</code>","text":"<p>Get the play queue of the authenticated user.</p> <p>Returns:</p> Type Description <code>PlayQueue</code> <p>An object that contains all the info of the play queue of the user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def get_play_queue(self) -&gt; PlayQueue:\n    \"\"\"Get the play queue of the authenticated user.\n\n    Returns:\n        An object that contains all the info of the\n            play queue of the user.\n    \"\"\"\n\n    response = self.api.json_request(\"getPlayQueue\")[\"playQueue\"]\n\n    return PlayQueue(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.save_play_queue","title":"<code>save_play_queue(song_ids, current_song_id=None, position=None)</code>","text":"<p>Saves a new play queue for the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>song_ids</code> <code>list[str]</code> <p>A list with all the songs to add to the queue.</p> required <code>current_song_id</code> <code>str | None</code> <p>The ID of the current playing song.</p> <code>None</code> <code>position</code> <code>int | None</code> <p>A position in milliseconds of where the current song playback it at.</p> <code>None</code> <p>Returns:</p> Type Description <code>PlayQueue</code> <p>An object that contains all the info of the new saved play queue.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def save_play_queue(\n    self,\n    song_ids: list[str],\n    current_song_id: str | None = None,\n    position: int | None = None,\n) -&gt; PlayQueue:\n    \"\"\"Saves a new play queue for the authenticated user.\n\n    Args:\n        song_ids: A list with all the songs to add to the queue.\n        current_song_id: The ID of the current playing song.\n        position: A position in milliseconds of where the current song\n            playback it at.\n\n    Returns:\n        An object that contains all the info of the new\n            saved play queue.\n    \"\"\"\n\n    self.api.json_request(\n        \"savePlayQueue\",\n        {\"id\": song_ids, \"current\": current_song_id, \"position\": position},\n    )\n\n    # Fake the song structure given by in the API.\n    songs = []\n    for song_id in song_ids:\n        songs.append({\"id\": song_id})\n\n    return PlayQueue(self.subsonic, songs, current_song_id, position)\n</code></pre>"},{"location":"reference/Bookmarks/#knuckles._bookmarks.Bookmarks.update_bookmark","title":"<code>update_bookmark(song_or_video_id, position, comment=None)</code>","text":"<p>Updates a bookmark for the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>song_or_video_id</code> <code>str</code> <p>The ID of the song or video to update its bookmark.</p> required <code>position</code> <code>int</code> <p>A position in milliseconds to be indicated with the song or video.</p> required <code>comment</code> <code>str | None</code> <p>A comment to be attached with the song or video.</p> <code>None</code> <p>Returns:     An object that contains all the info of the new created         bookmark.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_bookmarks.py</code> <pre><code>def update_bookmark(\n    self, song_or_video_id: str, position: int, comment: str | None = None\n) -&gt; Bookmark:\n    \"\"\"Updates a bookmark for the authenticated user.\n\n    Args:\n        song_or_video_id: The ID of the song or video to update its\n            bookmark.\n        position: A position in milliseconds to be indicated with the song\n            or video.\n        comment: A comment to be attached with the song or video.\n    Returns:\n        An object that contains all the info of the new created\n            bookmark.\n    \"\"\"\n\n    return self.create_bookmark(song_or_video_id, position, comment)\n</code></pre>"},{"location":"reference/Browsing/","title":"Browsing","text":""},{"location":"reference/Browsing/#knuckles._browsing.Browsing","title":"<code>Browsing(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the browsing endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_album","title":"<code>get_album(album_id)</code>","text":"<p>Get all the info about an album.</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>The ID of the album to get its info.</p> required <p>Returns:</p> Type Description <code>Album</code> <p>An object that contains all the info about the requested album.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_album(self, album_id: str) -&gt; Album:\n    \"\"\"Get all the info about an album.\n\n    Args:\n        album_id: The ID of the album to get its info.\n\n    Returns:\n        An object that contains all the info about\n            the requested album.\n    \"\"\"\n\n    response = self.api.json_request(\"getAlbum\", {\"id\": album_id})[\"album\"]\n\n    return Album(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_album_info","title":"<code>get_album_info(album_id)</code>","text":"<p>Get all the extra info about an album.</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>The ID of the album to get its extra info.</p> required <p>Returns:</p> Type Description <code>AlbumInfo</code> <p>An object that contains all the extra info about the requested album.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_album_info(self, album_id: str) -&gt; AlbumInfo:\n    \"\"\"Get all the extra info about an album.\n\n    Args:\n        album_id: The ID of the album to get its extra info.\n\n    Returns:\n        An object that contains all the extra info about\n            the requested album.\n    \"\"\"\n\n    response = self.api.json_request(\"getAlbumInfo2\", {\"id\": album_id})[\"albumInfo\"]\n\n    return AlbumInfo(self.subsonic, album_id, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_album_info_non_id3","title":"<code>get_album_info_non_id3(album_id)</code>","text":"<p>Get all the extra info about an album. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>The ID of the album to get its extra info.</p> required <p>Returns:</p> Type Description <code>AlbumInfo</code> <p>An object that contains all the extra info about the requested album.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_album_info_non_id3(self, album_id: str) -&gt; AlbumInfo:\n    \"\"\"Get all the extra info about an album. Not organized according\n    ID3 tags.\n\n    Args:\n        album_id: The ID of the album to get its extra info.\n\n    Returns:\n        An object that contains all the extra info about\n            the requested album.\n    \"\"\"\n\n    response = self.api.json_request(\"getAlbumInfo\", {\"id\": album_id})[\"albumInfo\"]\n\n    return AlbumInfo(self.subsonic, album_id, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_artist","title":"<code>get_artist(artist_id)</code>","text":"<p>Get all the info about an artist.</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>The ID of the artist to get its info.</p> required <p>Returns:</p> Type Description <code>Artist</code> <p>An object that contains all the info about the requested artist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_artist(self, artist_id: str) -&gt; Artist:\n    \"\"\"Get all the info about an artist.\n\n    Args:\n        artist_id: The ID of the artist to get its info.\n\n    Returns:\n        An object that contains all the info about\n            the requested artist.\n    \"\"\"\n\n    response = self.api.json_request(\"getArtist\", {\"id\": artist_id})[\"artist\"]\n\n    return Artist(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_artist_info","title":"<code>get_artist_info(artist_id, max_similar_artists=None, include_similar_artists_not_present=None)</code>","text":"<p>Get all the extra info about an artist.</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>The ID of the artist to get its extra info.</p> required <code>max_similar_artists</code> <code>int | None</code> <p>The max number of similar artists to return.</p> <code>None</code> <code>include_similar_artists_not_present</code> <code>bool | None</code> <p>Include similar artists that are not present in any the media library.</p> <code>None</code> <p>Returns:</p> Type Description <code>ArtistInfo</code> <p>An object that contains all the extra info about the requested artist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_artist_info(\n    self,\n    artist_id: str,\n    max_similar_artists: int | None = None,\n    include_similar_artists_not_present: bool | None = None,\n) -&gt; ArtistInfo:\n    \"\"\"Get all the extra info about an artist.\n\n    Args:\n        artist_id: The ID of the artist to get its extra info.\n        max_similar_artists: The max number of similar artists to\n            return.\n        include_similar_artists_not_present: Include similar artists\n            that are not present in any the media library.\n\n    Returns:\n        An object that contains all the extra info about\n            the requested artist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getArtistInfo2\",\n        {\n            \"id\": artist_id,\n            \"count\": max_similar_artists,\n            \"includeNotPresent\": include_similar_artists_not_present,\n        },\n    )[\"artistInfo2\"]\n\n    return ArtistInfo(self.subsonic, artist_id, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_artist_info_non_id3","title":"<code>get_artist_info_non_id3(artist_id, max_similar_artists=None, include_similar_artists_not_present=None)</code>","text":"<p>Get all the extra info about an artist. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>The ID of the artist to get its extra info.</p> required <code>max_similar_artists</code> <code>int | None</code> <p>The max number of similar artists to return.</p> <code>None</code> <code>include_similar_artists_not_present</code> <code>bool | None</code> <p>Include similar artists that are not present in any the media library.</p> <code>None</code> <p>Returns:</p> Type Description <code>ArtistInfo</code> <p>An object that contains all the extra info about the requested artist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_artist_info_non_id3(\n    self,\n    artist_id: str,\n    max_similar_artists: int | None = None,\n    include_similar_artists_not_present: bool | None = None,\n) -&gt; ArtistInfo:\n    \"\"\"Get all the extra info about an artist. Not organized according\n    ID3 tags.\n\n    Args:\n        artist_id: The ID of the artist to get its extra info.\n        max_similar_artists: The max number of similar artists to\n            return.\n        include_similar_artists_not_present: Include similar artists\n            that are not present in any the media library.\n\n    Returns:\n        An object that contains all the extra info about\n            the requested artist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getArtistInfo\",\n        {\n            \"id\": artist_id,\n            \"count\": max_similar_artists,\n            \"includeNotPresent\": include_similar_artists_not_present,\n        },\n    )[\"artistInfo\"]\n\n    return ArtistInfo(self.subsonic, artist_id, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_artists","title":"<code>get_artists(music_folder_id=None)</code>","text":"<p>Get all the registered artists in the server.</p> <p>Parameters:</p> Name Type Description Default <code>music_folder_id</code> <code>str | None</code> <p>A music folder ID to reduce the scope of the artists to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Artist]</code> <p>A list with all the info about all the received artists.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_artists(self, music_folder_id: str | None = None) -&gt; list[Artist]:\n    \"\"\"Get all the registered artists in the server.\n\n    Args:\n        music_folder_id: A music folder ID to reduce the scope of the\n            artists to return.\n\n    Returns:\n        A list with all the info about all the received artists.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getArtists\", {\"musicFolderId\": music_folder_id}\n    )[\"artists\"][\"index\"]\n\n    artists: list[Artist] = []\n\n    for index in response:\n        for artist_data in index[\"artist\"]:\n            artist = Artist(self.subsonic, **artist_data)\n            artists.append(artist)\n\n    return artists\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_artists_indexed","title":"<code>get_artists_indexed(music_folder_id, modified_since)</code>","text":"<p>Get all the registered artist indexed alphabetically.</p> <p>Parameters:</p> Name Type Description Default <code>music_folder_id</code> <code>str</code> <p>A music folder ID to reduce the scope where the artist should be from.</p> required <code>modified_since</code> <code>int</code> <p>Time in milliseconds since the artist have changed its collection.</p> required <p>Returns:</p> Type Description <code>ArtistIndex</code> <p>An object containt all the artist alphabetically indexed.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_artists_indexed(\n    self, music_folder_id: str, modified_since: int\n) -&gt; ArtistIndex:\n    \"\"\"Get all the registered artist indexed alphabetically.\n\n    Args:\n        music_folder_id: A music folder ID to reduce the scope\n            where the artist should be from.\n        modified_since: Time in milliseconds since the artist have changed\n            its collection.\n\n    Returns:\n        An object containt all the artist alphabetically indexed.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getIndexes\",\n        {\"musicFolderId\": music_folder_id, \"ifModifiedSince\": modified_since},\n    )[\"indexes\"]\n\n    return ArtistIndex(subsonic=self.subsonic, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_genre","title":"<code>get_genre(genre_name)</code>","text":"<p>Get all the info of a genre.</p> <p>Parameters:</p> Name Type Description Default <code>genre_name</code> <code>str</code> <p>The name of the genre to get its info.</p> required <p>Returns:</p> Type Description <code>Genre | None</code> <p>An object that contains all the info about the requested genre.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_genre(self, genre_name: str) -&gt; Genre | None:\n    \"\"\"Get all the info of a genre.\n\n    Args:\n        genre_name: The name of the genre to get its info.\n\n    Returns:\n        An object that contains all the info\n            about the requested genre.\n    \"\"\"\n\n    genres = self.get_genres()\n\n    for genre in genres:\n        if genre.value == genre_name:\n            return genre\n\n    return None\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_genres","title":"<code>get_genres()</code>","text":"<p>Get all the available genres in the server.</p> <p>Returns:</p> Type Description <code>list[Genre]</code> <p>A list with all the registered genres in the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_genres(self) -&gt; list[Genre]:\n    \"\"\"Get all the available genres in the server.\n\n    Returns:\n        A list with all the registered genres in the server.\n    \"\"\"\n\n    response = self.api.json_request(\"getGenres\")[\"genres\"][\"genre\"]\n\n    return [Genre(self.subsonic, **genre) for genre in response]\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_music_directory","title":"<code>get_music_directory(music_directory_id)</code>","text":"<p>Get the info of a music directory.</p> <p>Parameters:</p> Name Type Description Default <code>music_directory_id</code> <code>str</code> <p>The ID of the music directory to get its info.</p> required <p>Returns:</p> Type Description <code>MusicDirectory</code> <p>An object that holds all the info about the requested music directory.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_music_directory(self, music_directory_id: str) -&gt; MusicDirectory:\n    \"\"\"Get the info of a music directory.\n\n    Args:\n        music_directory_id: The ID of the music directory to get its info.\n\n    Returns:\n        An object that holds all the info about the requested music\n            directory.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getMusicDirectory\", {\"id\": music_directory_id}\n    )[\"directory\"]\n\n    return MusicDirectory(subsonic=self.subsonic, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_music_folder","title":"<code>get_music_folder(music_folder_id)</code>","text":"<p>Get the info of a music folder.</p> <p>Parameters:</p> Name Type Description Default <code>music_folder_id</code> <code>str</code> <p>The ID of the music folder to get.</p> required <p>Returns:</p> Type Description <code>MusicFolder | None</code> <p>An object that contains all the info about the requested music folder, or None if it wasn't found.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_music_folder(self, music_folder_id: str) -&gt; MusicFolder | None:\n    \"\"\"Get the info of a music folder.\n\n    Args:\n        music_folder_id: The ID of the music folder to get.\n\n    Returns:\n        An object that contains all the info about the\n            requested music folder, or None if it wasn't found.\n    \"\"\"\n\n    music_folders = self.get_music_folders()\n\n    for music_folder in music_folders:\n        if music_folder.id == music_folder_id:\n            return music_folder\n\n    return None\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_music_folders","title":"<code>get_music_folders()</code>","text":"<p>Get all the top level music folders.</p> <p>Returns:</p> Type Description <code>list[MusicFolder]</code> <p>A list that contains all the info about all the available music folders.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_music_folders(self) -&gt; list[MusicFolder]:\n    \"\"\"Get all the top level music folders.\n\n    Returns:\n        A list that contains all the info about all the available\n            music folders.\n    \"\"\"\n\n    response = self.api.json_request(\"getMusicFolders\")[\"musicFolders\"][\n        \"musicFolder\"\n    ]\n\n    return [MusicFolder(self.subsonic, **music_folder) for music_folder in response]\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_similar_songs","title":"<code>get_similar_songs(song_id, song_count=None)</code>","text":"<p>Get similar songs to the given one.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song to get similar songs.</p> required <code>song_count</code> <code>int | None</code> <p>The number of songs to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Song]</code> <p>A list that contains all the songs that are similar to the given one.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_similar_songs(\n    self, song_id: str, song_count: int | None = None\n) -&gt; list[Song]:\n    \"\"\"Get similar songs to the given one.\n\n    Args:\n        song_id: The ID of the song to get similar songs.\n        song_count: The number of songs to return.\n\n    Returns:\n        A list that contains all the songs that are similar\n            to the given one.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getSimilarSongs2\", {\"id\": song_id, \"count\": song_count}\n    )[\"similarSongs2\"][\"song\"]\n\n    return [Song(subsonic=self.subsonic, **song) for song in response]\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_similar_songs_non_id3","title":"<code>get_similar_songs_non_id3(song_id, song_count=None)</code>","text":"<p>Get similar songs to the given one. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song to get similar songs.</p> required <code>song_count</code> <code>int | None</code> <p>The number of songs to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Song]</code> <p>A list that contains all the songs that are similar to the given one.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_similar_songs_non_id3(\n    self, song_id: str, song_count: int | None = None\n) -&gt; list[Song]:\n    \"\"\"Get similar songs to the given one. Not organized according\n    ID3 tags.\n\n    Args:\n        song_id: The ID of the song to get similar songs.\n        song_count: The number of songs to return.\n\n    Returns:\n        A list that contains all the songs that are similar\n            to the given one.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getSimilarSongs\", {\"id\": song_id, \"count\": song_count}\n    )[\"similarSongs\"][\"song\"]\n\n    return [Song(subsonic=self.subsonic, **song) for song in response]\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_song","title":"<code>get_song(song_id)</code>","text":"<p>Get all the info about a song.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song to get its info.</p> required <p>Returns:</p> Type Description <code>Song</code> <p>An object that contains all the info about the requested song.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_song(self, song_id: str) -&gt; Song:\n    \"\"\"Get all the info about a song.\n\n    Args:\n        song_id: The ID of the song to get its info.\n\n    Returns:\n        An object that contains all the info\n            about the requested song.\n    \"\"\"\n\n    response = self.api.json_request(\"getSong\", {\"id\": song_id})[\"song\"]\n\n    return Song(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_top_songs","title":"<code>get_top_songs(artist_name, max_num_of_songs)</code>","text":"<p>Get the top rated songs in the server.</p> <p>Parameters:</p> Name Type Description Default <code>artist_name</code> <code>str</code> <p>Limit the ranked songs to the ones created by the given artist.</p> required <code>max_num_of_songs</code> <code>int</code> <p>The max number of songs to return.</p> required <p>Returns:</p> Type Description <code>list[Song]</code> <p>A list that contains the top rated songs of the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_top_songs(self, artist_name: str, max_num_of_songs: int) -&gt; list[Song]:\n    \"\"\"Get the top rated songs in the server.\n\n    Args:\n        artist_name: Limit the ranked songs to the ones created by the\n            given artist.\n        max_num_of_songs: The max number of songs to return.\n\n    Returns:\n        A list that contains the top rated songs of the server.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getTopSongs\", {\"artist\": artist_name, \"count\": max_num_of_songs}\n    )[\"topSongs\"][\"song\"]\n\n    return [Song(subsonic=self.subsonic, **song) for song in response]\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_video","title":"<code>get_video(video_id)</code>","text":"<p>Get all the info about a video.</p> <p>Parameters:</p> Name Type Description Default <code>video_id</code> <code>str</code> <p>The ID of the video to get its info.</p> required <p>Returns:</p> Type Description <code>Video | None</code> <p>An object that contains all the info about the requested video.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_video(self, video_id: str) -&gt; Video | None:\n    \"\"\"Get all the info about a video.\n\n    Args:\n        video_id: The ID of the video to get its info.\n\n    Returns:\n        An object that contains all the info about\n            the requested video.\n    \"\"\"\n\n    videos = self.get_videos()\n\n    for video in videos:\n        if video.id == video_id:\n            return video\n\n    return None\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_video_info","title":"<code>get_video_info(video_id)</code>","text":"<p>Get all the extra info about a video.</p> <p>Parameters:</p> Name Type Description Default <code>video_id</code> <code>str</code> <p>The ID of the video to get its extra info.</p> required <p>Returns:</p> Type Description <code>VideoInfo</code> <p>An object that holds all the extra info about the requested video.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_video_info(self, video_id: str) -&gt; VideoInfo:\n    \"\"\"Get all the extra info about a video.\n\n    Args:\n        video_id: The ID of the video to get its extra info.\n\n    Returns:\n        An object that holds all the extra info about\n            the requested video.\n    \"\"\"\n\n    response = self.api.json_request(\"getVideoInfo\", {\"id\": video_id})[\"videoInfo\"]\n\n    return VideoInfo(self.subsonic, video_id=video_id, **response)\n</code></pre>"},{"location":"reference/Browsing/#knuckles._browsing.Browsing.get_videos","title":"<code>get_videos()</code>","text":"<p>Get all the registered videos in the server.</p> <p>Returns:</p> Type Description <code>list[Video]</code> <p>A list with all the info about al the videos available in the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_browsing.py</code> <pre><code>def get_videos(self) -&gt; list[Video]:\n    \"\"\"Get all the registered videos in the server.\n\n    Returns:\n        A list with all the info about al the videos\n            available in the server.\n    \"\"\"\n\n    response = self.api.json_request(\"getVideos\")[\"videos\"][\"video\"]\n\n    return [Video(self.subsonic, **video) for video in response]\n</code></pre>"},{"location":"reference/Chat/","title":"Chat","text":""},{"location":"reference/Chat/#knuckles._chat.Chat","title":"<code>Chat(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the chat endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_chat.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Chat/#knuckles._chat.Chat.add_chat_message","title":"<code>add_chat_message(message)</code>","text":"<p>Add chat message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message content to add.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_chat.py</code> <pre><code>def add_chat_message(self, message: str) -&gt; \"Subsonic\":\n    \"\"\"Add chat message.\n\n    Args:\n        message: The message content to add.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n    self.api.json_request(\"addChatMessage\", {\"message\": message})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Chat/#knuckles._chat.Chat.get_chat_messages","title":"<code>get_chat_messages()</code>","text":"<p>Get all send chat messages.</p> <p>Returns:</p> Type Description <code>list[ChatMessage]</code> <p>A list with all the messages info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_chat.py</code> <pre><code>def get_chat_messages(self) -&gt; list[ChatMessage]:\n    \"\"\"Get all send chat messages.\n\n    Returns:\n        A list with all the messages info.\n    \"\"\"\n\n    response: list[dict[str, Any]] = self.api.json_request(\"getChatMessages\")[\n        \"chatMessages\"\n    ][\"chatMessage\"]\n\n    messages = [ChatMessage(self.subsonic, **message) for message in response]\n\n    return messages\n</code></pre>"},{"location":"reference/Exceptions/","title":"Exceptions","text":""},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode0","title":"<code>ErrorCode0</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 0, it being a generic error.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode10","title":"<code>ErrorCode10</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 10, meaning that a parameter for the requested endpoint is missing. Should never be raised because Knuckles takes care for enforcing mandatory parameters, if you have encountered this exception the server may have broke the OpenSubsonic API.</p> <p>If you suspect that this is an issue caused by Knuckles itself, please report it to upstream.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode20","title":"<code>ErrorCode20</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 20, meaning that the client has a lower RESP API version than the server. Should never be raised given that Knuckles supports up to the latest Subsonic REST API version.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode30","title":"<code>ErrorCode30</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 30, meaning that the server has a lower RESP API version than the client.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode40","title":"<code>ErrorCode40</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 40, meaning that the given user doesn't exists or the password is incorrect.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode41","title":"<code>ErrorCode41</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 42, meaning that token authentication is not available.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode50","title":"<code>ErrorCode50</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 50, meaning that the authenticated user is no authorized for the requested action.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode60","title":"<code>ErrorCode60</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server return an error code 60, meaning that the Subsonic trial period has ended.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ErrorCode70","title":"<code>ErrorCode70</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code 70, meaning that the requested data wasn't found.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.InvalidRatingNumber","title":"<code>InvalidRatingNumber</code>","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when input an invalid rating weight in a method of the API.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.MissingRequiredProperty","title":"<code>MissingRequiredProperty</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a property required to call a method is missing.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.ResourceNotFound","title":"<code>ResourceNotFound(message='Unable to generate the model as it does not exist in the server', *args)</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when a resource could not be retrieve to generate a model using a previous one.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/exceptions.py</code> <pre><code>def __init__(\n    self,\n    message: str = (\n        \"Unable to generate the model as it does not exist in the server\"\n    ),\n    *args: str,\n) -&gt; None:\n    super().__init__(message, *args)\n</code></pre>"},{"location":"reference/Exceptions/#knuckles.exceptions.ShareInvalidSongList","title":"<code>ShareInvalidSongList</code>","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised when a method in a share is called with an invalid song list.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.UnknownErrorCode","title":"<code>UnknownErrorCode</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when the server returns an error code that doesn't have a specific core error exception.</p>"},{"location":"reference/Exceptions/#knuckles.exceptions.get_error_code_exception","title":"<code>get_error_code_exception(error_code)</code>","text":"<p>Converts a numeric error code to its corresponding error code exception</p> <p>Parameters:</p> Name Type Description Default <code>error_code</code> <code>int</code> <p>The number of the error to get its exception.</p> required <p>Returns: The exception of the given error code</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/exceptions.py</code> <pre><code>def get_error_code_exception(\n    error_code: int,\n) -&gt; ERROR_CODE_EXCEPTION:\n    \"\"\"Converts a numeric error code to its corresponding error code exception\n\n    Args:\n        error_code: The number of the error to get its exception.\n\n    Returns: The exception of the given error code\n    \"\"\"\n    match error_code:\n        case 0:\n            return ErrorCode0\n        case 10:\n            return ErrorCode10\n        case 20:\n            return ErrorCode20\n        case 30:\n            return ErrorCode30\n        case 40:\n            return ErrorCode40\n        case 41:\n            return ErrorCode41\n        case 50:\n            return ErrorCode50\n        case 60:\n            return ErrorCode60\n        case 70:\n            return ErrorCode70\n        case _:\n            return UnknownErrorCode\n</code></pre>"},{"location":"reference/Internet%20Radio/","title":"Internet Radio","text":""},{"location":"reference/Internet%20Radio/#knuckles._internet_radio.InternetRadio","title":"<code>InternetRadio(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the internet radio endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_internet_radio.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Internet%20Radio/#knuckles._internet_radio.InternetRadio.create_internet_radio_station","title":"<code>create_internet_radio_station(stream_url, name, homepage_url=None)</code>","text":"<p>Create a new internet radio station.</p> <p>Parameters:</p> Name Type Description Default <code>stream_url</code> <code>str</code> <p>The URL of the stream to be added to the internet radio station.</p> required <code>name</code> <code>str</code> <p>The name of the new created internet radio station.</p> required <code>homepage_url</code> <code>str | None</code> <p>An URL for the homepage of the internet radio station.</p> <code>None</code> <p>Returns:</p> Type Description <code>Subsonic</code> <p>An object that holds all the data about the new created internet radio station.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_internet_radio.py</code> <pre><code>def create_internet_radio_station(\n    self, stream_url: str, name: str, homepage_url: str | None = None\n) -&gt; \"Subsonic\":\n    \"\"\"Create a new internet radio station.\n\n    Args:\n        stream_url: The URL of the stream to be added to the\n            internet radio station.\n        name: The name of the new created internet radio station.\n        homepage_url: An URL for the homepage of the internet\n            radio station.\n\n    Returns:\n        An object that holds all the data about the new created\n            internet radio station.\n    \"\"\"\n\n    self.api.json_request(\n        \"createInternetRadioStation\",\n        {\"streamUrl\": stream_url, \"name\": name, \"homepageUrl\": homepage_url},\n    )\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Internet%20Radio/#knuckles._internet_radio.InternetRadio.delete_internet_radio_station","title":"<code>delete_internet_radio_station(internet_radio_station_id)</code>","text":"<p>Delete an internet radio station.</p> <p>Parameters:</p> Name Type Description Default <code>internet_radio_station_id</code> <code>str</code> <p>The ID of the internet radio station to delete.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_internet_radio.py</code> <pre><code>def delete_internet_radio_station(\n    self, internet_radio_station_id: str\n) -&gt; \"Subsonic\":\n    \"\"\"Delete an internet radio station.\n\n    Args:\n        internet_radio_station_id: The ID of the internet radio station\n            to delete.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n    self.api.json_request(\n        \"deleteInternetRadioStation\", {\"id\": internet_radio_station_id}\n    )\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Internet%20Radio/#knuckles._internet_radio.InternetRadio.get_internet_radio_station","title":"<code>get_internet_radio_station(internet_radio_station_id)</code>","text":"<p>Get all the info related with a internet radio station.</p> <p>Parameters:</p> Name Type Description Default <code>internet_radio_station_id</code> <code>str</code> <p>The ID of the internet radio station to get its info.</p> required <p>Returns:</p> Type Description <code>InternetRadioStation | None</code> <p>An object that contains all the info about the requested internet radio station.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_internet_radio.py</code> <pre><code>def get_internet_radio_station(\n    self, internet_radio_station_id: str\n) -&gt; InternetRadioStation | None:\n    \"\"\"Get all the info related with a internet radio station.\n\n    Args:\n        internet_radio_station_id: The ID of the internet radio station\n            to get its info.\n\n    Returns:\n        An object that contains all the info about the requested\n            internet radio station.\n    \"\"\"\n\n    stations = self.get_internet_radio_stations()\n\n    for station in stations:\n        if station.id == internet_radio_station_id:\n            return station\n\n    return None\n</code></pre>"},{"location":"reference/Internet%20Radio/#knuckles._internet_radio.InternetRadio.get_internet_radio_stations","title":"<code>get_internet_radio_stations()</code>","text":"<p>Get all the internet radio stations available in the server.</p> <p>Returns:</p> Type Description <code>list[InternetRadioStation]</code> <p>A list with all the reported internet radio stations.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_internet_radio.py</code> <pre><code>def get_internet_radio_stations(\n    self,\n) -&gt; list[InternetRadioStation]:\n    \"\"\"Get all the internet radio stations available in the server.\n\n    Returns:\n        A list with all the reported internet radio stations.\n    \"\"\"\n\n    response = self.api.json_request(\"getInternetRadioStations\")[\n        \"internetRadioStations\"\n    ][\"internetRadioStation\"]\n\n    return [InternetRadioStation(self.subsonic, **station) for station in response]\n</code></pre>"},{"location":"reference/Internet%20Radio/#knuckles._internet_radio.InternetRadio.update_internet_radio_station","title":"<code>update_internet_radio_station(internet_radio_station_id, stream_url, name, homepage_url=None)</code>","text":"<p>Update the data of an internet radio station.</p> <p>Parameters:</p> Name Type Description Default <code>internet_radio_station_id</code> <code>str</code> <p>The ID of the internet radio station to edit its data.</p> required <code>stream_url</code> <code>str</code> <p>A new stream URL for the internet radio station.</p> required <code>name</code> <code>str</code> <p>a new name for the internet radio station.</p> required <code>homepage_url</code> <code>str | None</code> <p>A new homepage URL for the internet radio station.</p> <code>None</code> <p>Returns:</p> Type Description <code>Subsonic</code> <p>An object that holds all the data about the new updated internet radio station.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_internet_radio.py</code> <pre><code>def update_internet_radio_station(\n    self,\n    internet_radio_station_id: str,\n    stream_url: str,\n    name: str,\n    homepage_url: str | None = None,\n) -&gt; \"Subsonic\":\n    \"\"\"Update the data of an internet radio station.\n\n    Args:\n        internet_radio_station_id: The ID of the internet radio station\n            to edit its data.\n        stream_url: A new stream URL for the internet radio station.\n        name: a new name for the internet radio station.\n        homepage_url: A new homepage URL for the internet radio\n            station.\n\n    Returns:\n        An object that holds all the data about the new updated\n            internet radio station.\n    \"\"\"\n    self.api.json_request(\n        \"updateInternetRadioStation\",\n        {\n            \"id\": internet_radio_station_id,\n            \"streamUrl\": stream_url,\n            \"name\": name,\n            \"homepageUrl\": homepage_url,\n        },\n    )\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Jukebox/","title":"Jukebox","text":""},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl","title":"<code>JukeboxControl(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the jukebox control endpoint in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.add","title":"<code>add(songs_ids)</code>","text":"<p>Add songs to the jukebox playlist.</p> <p>Parameters:</p> Name Type Description Default <code>songs_ids</code> <code>list[str]</code> <p>A list of song IDs to add to the jukebox playlist.</p> required <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def add(self, songs_ids: list[str]) -&gt; Jukebox:\n    \"\"\"Add songs to the jukebox playlist.\n\n    Args:\n        songs_ids: A list of song IDs to add to the jukebox playlist.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"jukeboxControl\", {\"action\": \"add\", \"id\": songs_ids}\n    )[\"jukeboxStatus\"]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.clear","title":"<code>clear()</code>","text":"<p>Clear the playlist of the jukebox.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def clear(self) -&gt; Jukebox:\n    \"\"\"Clear the playlist of the jukebox.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n    response = self.api.json_request(\"jukeboxControl\", {\"action\": \"clear\"})[\n        \"jukeboxStatus\"\n    ]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.get","title":"<code>get()</code>","text":"<p>Get all the info related with the current playlist of the jukebox.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that holds all the info related with the playlist of the jukebox.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def get(self) -&gt; Jukebox:\n    \"\"\"Get all the info related with the current playlist of\n    the jukebox.\n\n    Returns:\n        An object that holds all the info related with\n            the playlist of the jukebox.\n    \"\"\"\n\n    response = self.api.json_request(\"jukeboxControl\", {\"action\": \"get\"})[\n        \"jukeboxPlaylist\"\n    ]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.remove","title":"<code>remove(index)</code>","text":"<p>Remove a song from the playlist of the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the song to remove from the playlist.</p> required <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def remove(self, index: int) -&gt; Jukebox:\n    \"\"\"Remove a song from the playlist of the jukebox.\n\n    Args:\n        index: The index of the song to remove from the playlist.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"jukeboxControl\", {\"action\": \"remove\", \"index\": index}\n    )[\"jukeboxStatus\"]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.set","title":"<code>set(songs_ids)</code>","text":"<p>Set the song playlist for the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>songs_ids</code> <code>list[str]</code> <p>A list of song IDs to set the jukebox playlist.</p> required <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def set(self, songs_ids: list[str]) -&gt; Jukebox:\n    \"\"\"Set the song playlist for the jukebox.\n\n    Args:\n        songs_ids: A list of song IDs to set the jukebox playlist.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"jukeboxControl\", {\"action\": \"set\", \"id\": songs_ids}\n    )[\"jukeboxStatus\"]\n\n    # Preset the song list as this call changes it in a predictable way\n    return Jukebox(\n        self.subsonic, **response, entry=[{\"id\": song_id} for song_id in songs_ids]\n    )\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.set_gain","title":"<code>set_gain(gain)</code>","text":"<p>Set the gain of the playback of the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>gain</code> <code>float</code> <p>A number between 0 and 1 (inclusive) to be set as the gain.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised if the given gain is not between 0 and 1.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def set_gain(self, gain: float) -&gt; Jukebox:\n    \"\"\"Set the gain of the playback of the jukebox.\n\n    Args:\n        gain: A number between 0 and 1 (inclusive) to be set as the gain.\n\n    Raises:\n        ValueError: Raised if the given gain is not between 0 and 1.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    if not 1 &gt; gain &gt; 0:\n        raise ValueError(\"The gain should be between 0 and 1 (inclusive)\")\n\n    response = self.api.json_request(\n        \"jukeboxControl\", {\"action\": \"setGain\", \"gain\": gain}\n    )[\"jukeboxStatus\"]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.shuffle","title":"<code>shuffle()</code>","text":"<p>Shuffle all the songs in the playlist of the jukebox.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def shuffle(self) -&gt; Jukebox:\n    \"\"\"Shuffle all the songs in the playlist of the jukebox.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\"jukeboxControl\", {\"action\": \"shuffle\"})[\n        \"jukeboxStatus\"\n    ]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.skip","title":"<code>skip(index, offset=0)</code>","text":"<p>Skip the playback of the current song in the jukebox playlist.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the song to skip to.</p> required <code>offset</code> <code>float</code> <p>The offset of seconds to start playing the next song.</p> <code>0</code> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def skip(self, index: int, offset: float = 0) -&gt; Jukebox:\n    \"\"\"Skip the playback of the current song in the jukebox playlist.\n\n    Args:\n        index: The index of the song to skip to.\n        offset: The offset of seconds to start playing the next song.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"jukeboxControl\", {\"action\": \"skip\", \"index\": index, \"offset\": offset}\n    )[\"jukeboxStatus\"]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.start","title":"<code>start()</code>","text":"<p>Start the playback of the current song in the jukebox playlist.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def start(self) -&gt; Jukebox:\n    \"\"\"Start the playback of the current song in the jukebox playlist.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\"jukeboxControl\", {\"action\": \"start\"})[\n        \"jukeboxStatus\"\n    ]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.status","title":"<code>status()</code>","text":"<p>Get all the info related with the current state of the jukebox.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that holds all the info related with the scate of the jukebox.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def status(self) -&gt; Jukebox:\n    \"\"\"Get all the info related with the current state of\n    the jukebox.\n\n    Returns:\n        An object that holds all the info related with\n            the scate of the jukebox.\n    \"\"\"\n\n    response = self.api.json_request(\"jukeboxControl\", {\"action\": \"status\"})[\n        \"jukeboxStatus\"\n    ]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Jukebox/#knuckles._jukebox.JukeboxControl.stop","title":"<code>stop()</code>","text":"<p>Stop the playback of the current song in the jukebox playlist.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>An object that contains the updated jukebox status and playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_jukebox.py</code> <pre><code>def stop(self) -&gt; Jukebox:\n    \"\"\"Stop the playback of the current song in the jukebox playlist.\n\n    Returns:\n        An object that contains the updated jukebox status\n            and playlist.\n    \"\"\"\n\n    response = self.api.json_request(\"jukeboxControl\", {\"action\": \"stop\"})[\n        \"jukeboxStatus\"\n    ]\n\n    return Jukebox(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Lists/","title":"Lists","text":""},{"location":"reference/Lists/#knuckles._lists.Lists","title":"<code>Lists(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the lists endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_alphabetical_by_artist","title":"<code>get_album_list_alphabetical_by_artist(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized alphabetically by their artist name. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized alphabetically by their artist name.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_alphabetical_by_artist(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized alphabetically\n    by their artist name. Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized alphabetically by their artist name.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"alphabeticalByArtist\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_alphabetical_by_artist_non_id3","title":"<code>get_album_list_alphabetical_by_artist_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized alphabetically by their artist name. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized alphabetically by their artist name.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_alphabetical_by_artist_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized alphabetically\n    by their artist name. Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized alphabetically by their artist name.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"alphabeticalByArtist\",\n        num_of_albums,\n        album_list_offset,\n        music_folder_id,\n        False,\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_alphabetical_by_name","title":"<code>get_album_list_alphabetical_by_name(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized alphabetically by their names. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized alphabetically by their names.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_alphabetical_by_name(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized alphabetically\n    by their names. Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized alphabetically by their names.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"alphabeticalByName\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_alphabetical_by_name_non_id3","title":"<code>get_album_list_alphabetical_by_name_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized alphabetically by their names. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized alphabetically by their names.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_alphabetical_by_name_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized alphabetically\n    by their names. Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized alphabetically by their names.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"alphabeticalByName\",\n        num_of_albums,\n        album_list_offset,\n        music_folder_id,\n        False,\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_by_genre","title":"<code>get_album_list_by_genre(genre_name, num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get all the albums that are tagged with the given genre. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>genre_name</code> <code>str</code> <p>The name of the genre that all the albums must be tagged with.</p> required <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums that are tagged with the given album.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_by_genre(\n    self,\n    genre_name: str,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get all the albums that are tagged with the given genre. Not organized\n    according ID3 tags.\n\n    Args:\n        genre_name: The name of the genre that all the albums must be tagged\n            with.\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            that are tagged with the given album.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"byGenre\",\n        num_of_albums,\n        album_list_offset,\n        music_folder_id,\n        genre=genre_name,\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_by_genre_non_id3","title":"<code>get_album_list_by_genre_non_id3(genre_name, num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get all the albums that are tagged with the given genre. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>genre_name</code> <code>str</code> <p>The name of the genre that all the albums must be tagged with.</p> required <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums that are tagged with the given album.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_by_genre_non_id3(\n    self,\n    genre_name: str,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get all the albums that are tagged with the given genre.\n    Not organized according ID3 tags.\n\n    Args:\n        genre_name: The name of the genre that all the albums\n            must be tagged with.\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            that are tagged with the given album.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"byGenre\",\n        num_of_albums,\n        album_list_offset,\n        music_folder_id,\n        False,\n        genre=genre_name,\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_by_year","title":"<code>get_album_list_by_year(from_year, to_year, num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get all the album registered by the server that were created between the given year range.</p> <p>Parameters:</p> Name Type Description Default <code>from_year</code> <code>int</code> <p>The minimum year of the range where the albums were created.</p> required <code>to_year</code> <code>int</code> <p>The maximum year of the range where the albums were created.</p> required <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums that where released in the given year range.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_by_year(\n    self,\n    from_year: int,\n    to_year: int,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get all the album registered by the server that were created between\n    the given year range.\n\n    Args:\n        from_year: The minimum year of the range where the albums\n            were created.\n        to_year: The maximum year of the range where the albums\n            were created.\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            that where released in the given year range.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"byYear\",\n        num_of_albums,\n        album_list_offset,\n        music_folder_id,\n        fromYear=from_year,\n        toYear=to_year,\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_by_year_non_id3","title":"<code>get_album_list_by_year_non_id3(from_year, to_year, num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get all the album registered by the server that were created between the given year range.</p> <p>Parameters:</p> Name Type Description Default <code>from_year</code> <code>int</code> <p>The minimum year of the range where the albums were created.</p> required <code>to_year</code> <code>int</code> <p>The maximum year of the range where the albums were created.</p> required <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums that where released in the given year range.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_by_year_non_id3(\n    self,\n    from_year: int,\n    to_year: int,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get all the album registered by the server that were created between\n    the given year range.\n\n    Args:\n        from_year: The minimum year of the range where the albums\n            were created.\n        to_year: The maximum year of the range where the albums\n            were created.\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            that where released in the given year range.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"byYear\",\n        num_of_albums,\n        album_list_offset,\n        music_folder_id,\n        False,\n        fromYear=from_year,\n        toYear=to_year,\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_frequent","title":"<code>get_album_list_frequent(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the most frequent listened to the least. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from the most frequent listened to the least.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_frequent(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the most frequent listened to the least.\n    Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from the most frequent listened to the least.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"frequent\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_frequent_non_id3","title":"<code>get_album_list_frequent_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the most frequent listened to the least. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from the most frequent listened to the least.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_frequent_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the most frequent listened to the least.\n    Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from the most frequent listened to the least.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"frequent\", num_of_albums, album_list_offset, music_folder_id, False\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_highest","title":"<code>get_album_list_highest(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the highest rated to the lowest ones. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>The number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>The ID of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from the highest rated to the lowest ones.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_highest(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the highest rated to the lowest ones. Not organized according ID3 tags.\n\n    Args:\n        num_of_albums: The number of albums to be in the list.\n        album_list_offset: The number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: The ID of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from the highest rated to the lowest ones.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"highest\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_highest_non_id3","title":"<code>get_album_list_highest_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the highest rated to the lowest ones. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>The number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>The ID of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from the highest rated to the lowest ones.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_highest_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the highest rated to the lowest ones. Not organized according ID3 tags.\n\n    Args:\n        num_of_albums: The number of albums to be in the list.\n        album_list_offset: The number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: The ID of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from the highest rated to the lowest ones.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"highest\", num_of_albums, album_list_offset, music_folder_id, False\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_newest","title":"<code>get_album_list_newest(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the newest added to the oldest. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>The number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>The ID of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from newest to oldest.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_newest(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the newest added to the oldest. Not organized according ID3 tags.\n\n    Args:\n        num_of_albums: The number of albums to be in the list.\n        album_list_offset: The number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: The ID of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from newest to oldest.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"newest\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_newest_non_id3","title":"<code>get_album_list_newest_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the newest added to the oldest. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>The number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>The ID of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from newest to oldest.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_newest_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the newest added to the oldest. Not organized according ID3 tags.\n\n    Args:\n        num_of_albums: The number of albums to be in the list.\n        album_list_offset: The number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: The ID of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from newest to oldest.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"newest\", num_of_albums, album_list_offset, music_folder_id, False\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_random","title":"<code>get_album_list_random(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a random list of albums from the server.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>The number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>The ID of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about random albums.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_random(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a random list of albums from the server.\n\n    Args:\n        num_of_albums: The number of albums to be in the list.\n        album_list_offset: The number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: The ID of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about random albums.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"random\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_random_non_id3","title":"<code>get_album_list_random_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a random list of albums from the server. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>The number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>The ID of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about random albums.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_random_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a random list of albums from the server. Not organized\n    according ID3 tags.\n\n    Args:\n        num_of_albums: The number of albums to be in the list.\n        album_list_offset: The number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: The ID of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about random albums.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"random\", num_of_albums, album_list_offset, music_folder_id, False\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_recent","title":"<code>get_album_list_recent(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the most recent listened to the least. not organized according id3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from the most recent listened to the least.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_recent(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the most recent listened to the least.\n    not organized according id3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from the most recent listened to the least.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"recent\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_recent_non_id3","title":"<code>get_album_list_recent_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of albums from the server organized from the most recent listened to the least. not organized according id3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums organized from the most recent listened to the least.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_recent_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of albums from the server organized from\n    the most recent listened to the least.\n    not organized according id3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            organized from the most recent listened to the least.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"recent\", num_of_albums, album_list_offset, music_folder_id, False\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_starred","title":"<code>get_album_list_starred(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of the albums that have been starred by the authenticated user. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums starred by the user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_starred(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of the albums that have been starred by\n    the authenticated user. Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            starred by the user.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"starred\", num_of_albums, album_list_offset, music_folder_id\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_album_list_starred_non_id3","title":"<code>get_album_list_starred_non_id3(num_of_albums=None, album_list_offset=None, music_folder_id=None)</code>","text":"<p>Get a list of the albums that have been starred by the authenticated user. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_albums</code> <code>int | None</code> <p>the number of albums to be in the list.</p> <code>None</code> <code>album_list_offset</code> <code>int | None</code> <p>the number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>the id of a music folder to list where the album are from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>A list that contains the info about the albums starred by the user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_album_list_starred_non_id3(\n    self,\n    num_of_albums: int | None = None,\n    album_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Album]:\n    \"\"\"Get a list of the albums that have been starred by\n    the authenticated user. Not organized according ID3 tags.\n\n    args:\n        num_of_albums: the number of albums to be in the list.\n        album_list_offset: the number of album to offset in the list,\n            useful for pagination.\n        music_folder_id: the id of a music folder to list where the album\n            are from.\n\n    Returns:\n        A list that contains the info about the albums\n            starred by the user.\n    \"\"\"\n\n    return self._get_album_list_generic(\n        \"starred\", num_of_albums, album_list_offset, music_folder_id, False\n    )\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_now_playing","title":"<code>get_now_playing()</code>","text":"<p>Get the songs that are currently playing by all the users.</p> <p>Returns:</p> Type Description <code>list[NowPlayingEntry]</code> <p>A list that holds all the info about all the song that are current playing by all the users.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_now_playing(self) -&gt; list[NowPlayingEntry]:\n    \"\"\"Get the songs that are currently playing by all the users.\n\n    Returns:\n        A list that holds all the info about all the\n            song that are current playing by all the users.\n    \"\"\"\n\n    response = self.api.json_request(\"getNowPlaying\")[\"nowPlaying\"][\"entry\"]\n\n    return [NowPlayingEntry(subsonic=self.subsonic, **entry) for entry in response]\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_random_songs","title":"<code>get_random_songs(num_of_songs=None, genre_name=None, from_year=None, to_year=None, music_folder_id=None)</code>","text":"<p>Get random songs registered in the server.</p> <p>Parameters:</p> Name Type Description Default <code>num_of_songs</code> <code>int | None</code> <p>The number of songs to return.</p> <code>None</code> <code>genre_name</code> <code>str | None</code> <p>The genre that the songs must have it tagged on them.</p> <code>None</code> <code>from_year</code> <code>int | None</code> <p>The minimum year where the songs were released.</p> <code>None</code> <code>to_year</code> <code>int | None</code> <p>The maximum year where the songs were released.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>An ID of a music folder to limit where the songs should be from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Song]</code> <p>A list that contains all the info about that were randomly selected by the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_random_songs(\n    self,\n    num_of_songs: int | None = None,\n    genre_name: str | None = None,\n    from_year: int | None = None,\n    to_year: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Song]:\n    \"\"\"Get random songs registered in the server.\n\n    Args:\n        num_of_songs: The number of songs to return.\n        genre_name: The genre that the songs must\n            have it tagged on them.\n        from_year: The minimum year where the songs\n            were released.\n        to_year: The maximum year where the songs\n            were released.\n        music_folder_id: An ID of a music folder\n            to limit where the songs should be from.\n\n    Returns:\n        A list that contains all the info about\n            that were randomly selected by the server.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getRandomSongs\",\n        {\n            \"size\": num_of_songs,\n            \"genre\": genre_name,\n            \"fromYear\": from_year,\n            \"toYear\": to_year,\n            \"musicFolderId\": music_folder_id,\n        },\n    )[\"randomSongs\"][\"song\"]\n\n    return [Song(subsonic=self.subsonic, **song) for song in response]\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_songs_by_genre","title":"<code>get_songs_by_genre(genre_name, num_of_songs=None, song_list_offset=None, music_folder_id=None)</code>","text":"<p>Get all the songs tagged with the given genre.</p> <p>Parameters:</p> Name Type Description Default <code>genre_name</code> <code>str</code> <p>The name of the genre that all the songs must be tagged with.</p> required <code>num_of_songs</code> <code>int | None</code> <p>The number of songs that the list should have.</p> <code>None</code> <code>song_list_offset</code> <code>int | None</code> <p>the number of songs to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>An ID of a music folder where all the songs should be from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Song]</code> <p>A list that contains all the info about that are tagged with the given genre.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_songs_by_genre(\n    self,\n    genre_name: str,\n    num_of_songs: int | None = None,\n    song_list_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; list[Song]:\n    \"\"\"Get all the songs tagged with the given genre.\n\n    Args:\n        genre_name: The name of the genre that all the songs\n            must be tagged with.\n        num_of_songs: The number of songs that the list\n            should have.\n        song_list_offset: the number of songs to offset in the list,\n            useful for pagination.\n        music_folder_id: An ID of a music folder where all the songs\n            should be from.\n\n    Returns:\n        A list that contains all the info about\n            that are tagged with the given genre.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getSongsByGenre\",\n        {\n            \"genre\": genre_name,\n            \"count\": num_of_songs,\n            \"offset\": song_list_offset,\n            \"musicFolderId\": music_folder_id,\n        },\n    )[\"songsByGenre\"][\"song\"]\n\n    return [Song(subsonic=self.subsonic, **song) for song in response]\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_starred","title":"<code>get_starred(music_folder_id=None)</code>","text":"<p>Get all the songs, albums and artists starred by the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>music_folder_id</code> <code>str | None</code> <p>An ID of a music folder where all the songs albums, and artists should be from.</p> <code>None</code> <p>Returns:</p> Type Description <code>StarredContent</code> <p>An object that holds all the info about all the starred songs, albums and artists by the user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_starred(self, music_folder_id: str | None = None) -&gt; StarredContent:\n    \"\"\"Get all the songs, albums and artists starred by the authenticated\n    user.\n\n    Args:\n        music_folder_id: An ID of a music folder where all the songs\n            albums, and artists should be from.\n\n    Returns:\n        An object that holds all the info about all the starred\n            songs, albums and artists by the user.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getStarred2\", {\"musicFolderId\": music_folder_id}\n    )[\"starred2\"]\n\n    return StarredContent(subsonic=self.subsonic, **response)\n</code></pre>"},{"location":"reference/Lists/#knuckles._lists.Lists.get_starred_non_id3","title":"<code>get_starred_non_id3(music_folder_id=None)</code>","text":"<p>Get all the songs, albums and artists starred by the authenticated user. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>music_folder_id</code> <code>str | None</code> <p>An ID of a music folder where all the songs albums, and artists should be from.</p> <code>None</code> <p>Returns:</p> Type Description <code>StarredContent</code> <p>An object that holds all the info about all the starred songs, albums and artists by the user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_lists.py</code> <pre><code>def get_starred_non_id3(self, music_folder_id: str | None = None) -&gt; StarredContent:\n    \"\"\"Get all the songs, albums and artists starred by the authenticated\n    user. Not organized according ID3 tags.\n\n    Args:\n        music_folder_id: An ID of a music folder where all the songs\n            albums, and artists should be from.\n\n    Returns:\n        An object that holds all the info about all the starred\n            songs, albums and artists by the user.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getStarred\", {\"musicFolderId\": music_folder_id}\n    )[\"starred\"]\n\n    return StarredContent(subsonic=self.subsonic, **response)\n</code></pre>"},{"location":"reference/Media%20Annotation/","title":"Media Annotation","text":""},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation","title":"<code>MediaAnnotation(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the media annotations endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.remove_rating","title":"<code>remove_rating(song_id)</code>","text":"<p>Remove the rating entry of a song.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song which entry should be removed.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def remove_rating(self, song_id: str) -&gt; \"Subsonic\":\n    \"\"\"Remove the rating entry of a song.\n\n    Args:\n        song_id: The ID of the song which entry should\n            be removed.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"setRating\", {\"id\": song_id, \"rating\": 0})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.scrobble","title":"<code>scrobble(song_id, time, submission=True)</code>","text":"<p>Scrobble (register) that some song have been locally played or is being played.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>list[str]</code> <p>The ID of the song to scrobble.</p> required <code>time</code> <code>list[datetime]</code> <p>How many times in second the song has been listened.</p> required <code>submission</code> <code>bool</code> <p>If true it will be registered that the song was played, if false the song will be scrobble as now playing.</p> <code>True</code> <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def scrobble(\n    self, song_id: list[str], time: list[datetime], submission: bool = True\n) -&gt; \"Subsonic\":\n    \"\"\"Scrobble (register) that some song have been locally played or\n    is being played.\n\n    Args:\n        song_id: The ID of the song to scrobble.\n        time: How many times in second the song has been listened.\n        submission: If true it will be registered that the song **was\n            played**, if false the song will be scrobble as\n            **now playing**.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n    self.api.json_request(\n        \"scrobble\",\n        # Multiply by 1000 because the API uses\n        # milliseconds instead of seconds for UNIX time\n        {\n            \"id\": song_id,\n            \"time\": [int(seconds.timestamp()) * 1000 for seconds in time],\n            \"submission\": submission,\n        },\n    )\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.set_rating","title":"<code>set_rating(song_id, rating)</code>","text":"<p>The the rating of a song.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song to set its rating.</p> required <code>rating</code> <code>int</code> <p>The rating between 1 and 5 (inclusive) to set the rating of the song to.</p> required <p>Raises:</p> Type Description <code>InvalidRatingNumber</code> <p>Raised when a number that is not between 1 and 5 (inclusive) has been pass in into the <code>rating</code> parameter.</p> <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def set_rating(self, song_id: str, rating: int) -&gt; \"Subsonic\":\n    \"\"\"The the rating of a song.\n\n    Args:\n        song_id: The ID of the song to set its rating.\n        rating: The rating between 1 and 5 (inclusive) to set\n            the rating of the song to.\n\n    Raises:\n        InvalidRatingNumber: Raised when a number that is not\n            between 1 and 5 (inclusive) has been pass in into\n            the `rating` parameter.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    if rating not in range(1, 6):\n        raise InvalidRatingNumber(\n            (\n                \"Invalid rating number, \"\n                + \"only numbers between 1 and 5 (inclusive) are allowed\"\n            )\n        )\n\n    self.api.json_request(\"setRating\", {\"id\": song_id, \"rating\": rating})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.star_album","title":"<code>star_album(album_id)</code>","text":"<p>Star an album from the server.</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>The ID of the album to star.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def star_album(self, album_id: str) -&gt; \"Subsonic\":\n    \"\"\"Star an album from the server.\n\n    Args:\n        album_id: The ID of the album to star.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"star\", {\"albumId\": album_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.star_artist","title":"<code>star_artist(artist_id)</code>","text":"<p>Star an artist from the server.</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>The ID of the artist to star.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def star_artist(self, artist_id: str) -&gt; \"Subsonic\":\n    \"\"\"Star an artist from the server.\n\n    Args:\n        artist_id: The ID of the artist to star.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"star\", {\"artistId\": artist_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.star_song","title":"<code>star_song(song_id)</code>","text":"<p>Star a song from the server.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song to star.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def star_song(self, song_id: str) -&gt; \"Subsonic\":\n    \"\"\"Star a song from the server.\n\n    Args:\n        song_id: The ID of the song to star.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"star\", {\"id\": song_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.unstar_album","title":"<code>unstar_album(album_id)</code>","text":"<p>Unstar an album from the server.</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>The ID of the album to unstar.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def unstar_album(self, album_id: str) -&gt; \"Subsonic\":\n    \"\"\"Unstar an album from the server.\n\n    Args:\n        album_id: The ID of the album to unstar.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"unstar\", {\"albumId\": album_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.unstar_artist","title":"<code>unstar_artist(artist_id)</code>","text":"<p>Unstar an artist from the server.</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>The ID of the artist to unstar.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def unstar_artist(self, artist_id: str) -&gt; \"Subsonic\":\n    \"\"\"Unstar an artist from the server.\n\n    Args:\n        artist_id: The ID of the artist to unstar.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"unstar\", {\"artistId\": artist_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Annotation/#knuckles._media_annotation.MediaAnnotation.unstar_song","title":"<code>unstar_song(song_id)</code>","text":"<p>Unstar a song from the server.</p> <p>Parameters:</p> Name Type Description Default <code>song_id</code> <code>str</code> <p>The ID of the song to unstar.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_annotation.py</code> <pre><code>def unstar_song(self, song_id: str) -&gt; \"Subsonic\":\n    \"\"\"Unstar a song from the server.\n\n    Args:\n        song_id: The ID of the song to unstar.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"unstar\", {\"id\": song_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Media%20Library%20Scanning/","title":"Media Library Scanning","text":""},{"location":"reference/Media%20Library%20Scanning/#knuckles._media_library_scanning.MediaLibraryScanning","title":"<code>MediaLibraryScanning(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the media library scanning endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_library_scanning.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Media%20Library%20Scanning/#knuckles._media_library_scanning.MediaLibraryScanning.get_scan_status","title":"<code>get_scan_status()</code>","text":"<p>Get the status of the scanning of the library.</p> <p>Returns:</p> Type Description <code>ScanStatus</code> <p>An object that holds all the info about the current state of the scanning of the library.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_library_scanning.py</code> <pre><code>def get_scan_status(self) -&gt; ScanStatus:\n    \"\"\"Get the status of the scanning of the library.\n\n    Returns:\n        An object that holds all the info about the\n            current state of the scanning of the library.\n    \"\"\"\n\n    response = self.api.json_request(\"getScanStatus\")[\"scanStatus\"]\n\n    return ScanStatus(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Media%20Library%20Scanning/#knuckles._media_library_scanning.MediaLibraryScanning.start_scan","title":"<code>start_scan()</code>","text":"<p>Request to the server to start a scanning of the library.</p> <p>Returns:</p> Type Description <code>ScanStatus</code> <p>An object that holds all the info about the current state of the scanning of the library.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_library_scanning.py</code> <pre><code>def start_scan(self) -&gt; ScanStatus:\n    \"\"\"Request to the server to start a scanning of the library.\n\n    Returns:\n        An object that holds all the info about the\n            current state of the scanning of the library.\n    \"\"\"\n\n    response = self.api.json_request(\"startScan\")[\"scanStatus\"]\n\n    return ScanStatus(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Media%20Retrieval/","title":"Media Retrieval","text":""},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval","title":"<code>MediaRetrieval(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the media retrieval endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.download","title":"<code>download(song_or_video_id, file_or_directory_path, use_stream=False)</code>","text":"<p>Download a song or video from the server.</p> <p>Parameters:</p> Name Type Description Default <code>song_or_video_id</code> <code>str</code> <p>The ID of the song or video to download.</p> required <code>file_or_directory_path</code> <code>Path</code> <p>The path where the downloaded file should be saved. If the given path is a directory then the file will be downloaded inside of it, if its a valid file path it will be downloaded using this exact filename.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The path where the song or video was finally saved.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def download(\n    self, song_or_video_id: str, file_or_directory_path: Path, use_stream=False\n) -&gt; Path:\n    \"\"\"Download a song or video from the server.\n\n    Args:\n        song_or_video_id: The ID of the song or video to download.\n        file_or_directory_path: The path where the downloaded file should\n            be saved. If the given path is a directory then the file will\n            be downloaded inside of it, if its a valid file path it will be\n            downloaded using this exact filename.\n\n    Returns:\n        The path where the song or video was finally saved.\n    \"\"\"\n\n    if not use_stream:\n        response = self.api.raw_request(\"download\", {\"id\": song_or_video_id})\n    else:\n        response = self.api.raw_request(\"stream\", {\"id\": song_or_video_id})\n\n    def determinate_filename(file_response: Response) -&gt; str:\n        if \"Content-Disposition\" in file_response.headers:\n            filename = (\n                file_response.headers[\"Content-Disposition\"]\n                .split(\"filename=\")[1]\n                .strip()\n            )\n        else:\n            filename = str(datetime.datetime.now())\n\n        # Remove leading quote char\n        if filename[0] == '\"':\n            filename = filename[1:]\n\n        # Remove trailing quote char\n        if filename[-1] == '\"':\n            filename = filename[:-1]\n\n        return filename\n\n    return self._handle_download(\n        response, file_or_directory_path, determinate_filename\n    )\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.get_avatar","title":"<code>get_avatar(username, file_or_directory_path)</code>","text":"<p>Download the avatar image of a user from the server.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to get its avatar from.</p> required <code>file_or_directory_path</code> <code>Path</code> <p>The path where the downloaded file should be saved. If the given path is a directory then the file will be downloaded inside of it, if its a valid file path it will be downloaded using this exact filename.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The path where the avatar image was finally saved.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def get_avatar(self, username: str, file_or_directory_path: Path) -&gt; Path:\n    \"\"\"Download the avatar image of a user from the server.\n\n    Args:\n        username: The username of the user to get its avatar from.\n        file_or_directory_path: The path where the downloaded file should\n            be saved. If the given path is a directory then the file will\n            be downloaded inside of it, if its a valid file path it will be\n            downloaded using this exact filename.\n\n    Returns:\n        The path where the avatar image was finally saved.\n    \"\"\"\n\n    response = self.api.raw_request(\"getAvatar\", {\"username\": username})\n\n    def determinate_filename(file_response: Response) -&gt; str:\n        file_extension = guess_extension(\n            file_response.headers[\"content-type\"].partition(\";\")[0].strip()\n        )\n\n        return username + file_extension if file_extension else username\n\n    return self._handle_download(\n        response, file_or_directory_path, determinate_filename\n    )\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.get_captions","title":"<code>get_captions(caption_id, file_or_directory_path, subtitles_file_format=SubtitlesFileFormat.VTT)</code>","text":"<p>Download a video caption file from the server.</p> <p>Parameters:</p> Name Type Description Default <code>caption_id</code> <code>str</code> <p>The ID of the caption to download.</p> required <code>file_or_directory_path</code> <code>Path</code> <p>The path where the downloaded file should be saved. If the given path is a directory then the file will be downloaded inside of it, if its a valid file path it will be downloaded using this exact filename.</p> required <code>subtitles_file_format</code> <code>SubtitlesFileFormat</code> <p>The format that the subtitle file should have.</p> <code>VTT</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path where the captions was finally saved.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def get_captions(\n    self,\n    caption_id: str,\n    file_or_directory_path: Path,\n    subtitles_file_format: SubtitlesFileFormat = SubtitlesFileFormat.VTT,\n) -&gt; Path:\n    \"\"\"Download a video caption file from the server.\n\n    Args:\n        caption_id: The ID of the caption to download.\n        file_or_directory_path: The path where the downloaded file should\n            be saved. If the given path is a directory then the file will\n            be downloaded inside of it, if its a valid file path it will be\n            downloaded using this exact filename.\n        subtitles_file_format: The format that the subtitle file should\n            have.\n\n    Returns:\n        The path where the captions was finally saved.\n    \"\"\"\n\n    # Check if the given file format is a valid one\n    SubtitlesFileFormat(subtitles_file_format.value)\n\n    response = self.api.raw_request(\n        \"getCaptions\",\n        {\"id\": caption_id, \"format\": subtitles_file_format.value},\n    )\n\n    def determinate_filename(file_response: Response) -&gt; str:\n        mime_type = file_response.headers[\"content-type\"].partition(\";\")[0].strip()\n\n        # application/x-subrip is not a valid MIME TYPE so a manual check is needed\n        file_extension: str | None = None\n        if mime_type == \"application/x-subrip\":\n            file_extension = \".srt\"\n        else:\n            file_extension = guess_extension(mime_type)\n\n        return caption_id + file_extension if file_extension else caption_id\n\n    return self._handle_download(\n        response, file_or_directory_path, determinate_filename\n    )\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.get_cover_art","title":"<code>get_cover_art(cover_art_id, file_or_directory_path, size=None)</code>","text":"<p>Download the cover art from the server.</p> <p>Parameters:</p> Name Type Description Default <code>cover_art_id</code> <code>str</code> <p>The ID of the cover art to download.</p> required <code>file_or_directory_path</code> <code>Path</code> <p>The path where the downloaded file should be saved. If the given path is a directory then the file will be downloaded inside of it, if its a valid file path it will be downloaded using this exact filename.</p> required <code>size</code> <code>int | None</code> <p>The width in pixels that the image should have, the cover arts are always squares.</p> <code>None</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path where the captions was finally saved.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def get_cover_art(\n    self, cover_art_id: str, file_or_directory_path: Path, size: int | None = None\n) -&gt; Path:\n    \"\"\"Download the cover art from the server.\n\n    Args:\n        cover_art_id: The ID of the cover art to download.\n        file_or_directory_path: The path where the downloaded file should\n            be saved. If the given path is a directory then the file will\n            be downloaded inside of it, if its a valid file path it will be\n            downloaded using this exact filename.\n        size: The width in pixels that the image should have,\n            the cover arts are always squares.\n\n    Returns:\n        The path where the captions was finally saved.\n    \"\"\"\n\n    response = self.api.raw_request(\n        \"getCoverArt\", {\"id\": cover_art_id, \"size\": size}\n    )\n\n    def determinate_filename(file_response: Response) -&gt; str:\n        file_extension = guess_extension(\n            file_response.headers[\"content-type\"].partition(\";\")[0].strip()\n        )\n\n        return cover_art_id + file_extension if file_extension else cover_art_id\n\n    return self._handle_download(\n        response, file_or_directory_path, determinate_filename\n    )\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.get_lyrics","title":"<code>get_lyrics(artist_name=None, song_title=None)</code>","text":"<p>Get the lyrics of a song.</p> <p>Parameters:</p> Name Type Description Default <code>artist_name</code> <code>str | None</code> <p>The name of the artist that made the song to get its lyrics from.</p> <code>None</code> <code>song_title</code> <code>str | None</code> <p>The title of the song to get its lyrics from.</p> <code>None</code> <p>Returns:</p> Type Description <code>Lyrics</code> <p>An object that contains all the info about the requested lyrics.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def get_lyrics(\n    self, artist_name: str | None = None, song_title: str | None = None\n) -&gt; Lyrics:\n    \"\"\"Get the lyrics of a song.\n\n    Args:\n        artist_name: The name of the artist that made the song to get its\n            lyrics from.\n        song_title: The title of the song to get its lyrics from.\n\n    Returns:\n        An object that contains all the info about the requested\n            lyrics.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getLyrics\", {\"artist\": artist_name, \"title\": song_title}\n    )[\"lyrics\"]\n\n    return Lyrics(subsonic=self.subsonic, **response)\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.hls","title":"<code>hls(song_or_video_id, custom_bitrates=None, audio_track_id=None)</code>","text":"<p>Get the URL required to stream a song or video with hls.m3u8.</p> <p>Parameters:</p> Name Type Description Default <code>song_or_video_id</code> <code>str</code> <p>The ID of the song or video to stream.</p> required <code>custom_bitrates</code> <code>list[str] | None</code> <p>The bitrate that the server should try to limit the stream to. If more that one is specified the server will create a <code>variant playlist</code>, suitable for adaptive bitrate streaming.</p> <code>None</code> <code>audio_track_id</code> <code>str | None</code> <p>The ID of an audio track to be added to the stream if video is being streamed.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>An URL with all the needed parameters to start a streaming with hls.m3u8 using a GET request.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def hls(\n    self,\n    song_or_video_id: str,\n    custom_bitrates: list[str] | None = None,\n    audio_track_id: str | None = None,\n) -&gt; str:\n    \"\"\"Get the URL required to stream a song or video with hls.m3u8.\n\n    Args:\n        song_or_video_id: The ID of the song or video to stream.\n        custom_bitrates: The bitrate that the server should try to\n            limit the stream to. If more that one is specified the\n            server will create a `variant playlist`, suitable for adaptive\n            bitrate streaming.\n        audio_track_id: The ID of an audio track to be added to the stream\n            if video is being streamed.\n\n    Returns:\n        An URL with all the needed parameters to start a streaming\n            with hls.m3u8 using a GET request.\n    \"\"\"\n\n    return self.subsonic.api.generate_url(\n        \"hls.m3u8\",\n        {\n            \"id\": song_or_video_id,\n            \"bitRate\": custom_bitrates,\n            \"audioTrack\": audio_track_id,\n        },\n    )\n</code></pre>"},{"location":"reference/Media%20Retrieval/#knuckles._media_retrieval.MediaRetrieval.stream","title":"<code>stream(song_or_video_id, max_bitrate_rate=None, stream_format=None, time_offset=None, size=None, estimate_content_length=None, converted=None)</code>","text":"<p>Get the URL required to stream a song or video.</p> <p>Parameters:</p> Name Type Description Default <code>song_or_video_id</code> <code>str</code> <p>The ID of the song or video to get its steam URL</p> required <code>max_bitrate_rate</code> <code>int | None</code> <p>The max bitrate the stream should have.</p> <code>None</code> <code>stream_format</code> <code>str | None</code> <p>The format the song or video should be. Warning: The available formats are dependant of the server implementation. The only secure format is \"raw\", which disabled transcoding at all.</p> <code>None</code> <code>time_offset</code> <code>int | None</code> <p>An offset where the stream should start. It may not work with video, depending of the server configuration.</p> <code>None</code> <code>size</code> <code>str | None</code> <p>The maximum resolution of the streaming in the format <code>WxH</code>, only works with video streaming.</p> <code>None</code> <code>estimate_content_length</code> <code>bool | None</code> <p>When set to true the response with have the <code>Content-Length</code> HTTP header set to a estimated duration for the streamed song or video.</p> <code>None</code> <code>converted</code> <code>bool | None</code> <p>If set to true the server will try to stream a transcoded version in <code>MP4</code>. Only works with video streaming.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>An URL with all the needed parameters to start a streaming using a GET request.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_media_retrieval.py</code> <pre><code>def stream(\n    self,\n    song_or_video_id: str,\n    max_bitrate_rate: int | None = None,\n    stream_format: str | None = None,\n    time_offset: int | None = None,\n    size: str | None = None,\n    estimate_content_length: bool | None = None,\n    converted: bool | None = None,\n) -&gt; str:\n    \"\"\"Get the URL required to stream a song or video.\n\n    Args:\n        song_or_video_id: The ID of the song or video to get its\n            steam URL\n        max_bitrate_rate: The max bitrate the stream should have.\n        stream_format: The format the song or video should be.\n            **Warning**: The available formats are dependant of the\n            server implementation. The only secure format is \"raw\",\n            which disabled transcoding at all.\n        time_offset: An offset where the stream should start. It may\n            not work with video, depending of the server configuration.\n        size: The maximum resolution of the streaming in the format `WxH`,\n            only works with video streaming.\n        estimate_content_length: When set to true the response with have\n            the `Content-Length` HTTP header set to a estimated duration\n            for the streamed song or video.\n        converted: If set to true the server will try to stream a\n            transcoded version in `MP4`. Only works with video\n            streaming.\n\n    Returns:\n        An URL with all the needed parameters to start a streaming\n            using a GET request.\n    \"\"\"\n\n    return self.subsonic.api.generate_url(\n        \"stream\",\n        {\n            \"id\": song_or_video_id,\n            \"maxBitRate\": max_bitrate_rate,\n            \"format\": stream_format,\n            \"timeOffset\": time_offset,\n            \"size\": size,\n            \"estimateContentLength\": estimate_content_length,\n            \"converted\": converted,\n        },\n    )\n</code></pre>"},{"location":"reference/Playlists/","title":"Playlists","text":""},{"location":"reference/Playlists/#knuckles._playlists.Playlists","title":"<code>Playlists(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the playlists endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_playlists.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Playlists/#knuckles._playlists.Playlists.create_playlist","title":"<code>create_playlist(name, comment=None, public=None, song_ids=None)</code>","text":"<p>Create a new playlist for the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the playlist to be created.</p> required <code>comment</code> <code>str | None</code> <p>A comment to be added to the new created playlist.</p> <code>None</code> <code>public</code> <code>bool | None</code> <p>If the song should be public or not.</p> <code>None</code> <code>song_ids</code> <code>list[str] | None</code> <p>A list of ID of the songs that should be included with the playlist.</p> <code>None</code> <p>Returns:</p> Type Description <code>Playlist</code> <p>An object that holds all the info about the new created playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_playlists.py</code> <pre><code>def create_playlist(\n    self,\n    name: str,\n    comment: str | None = None,\n    public: bool | None = None,\n    song_ids: list[str] | None = None,\n) -&gt; Playlist:\n    \"\"\"Create a new playlist for the authenticated user.\n\n    Args:\n        name: The name of the playlist to be created.\n        comment: A comment to be added to the new created playlist.\n        public: If the song should be public or not.\n        song_ids: A list of ID of the songs that should be included\n            with the playlist.\n\n    Returns:\n        An object that holds all the info about the new created playlist.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"createPlaylist\", {\"name\": name, \"songId\": song_ids}\n    )[\"playlist\"]\n\n    new_playlist = Playlist(self.subsonic, **response)\n\n    # Allow to modify comment and public\n    # with a workaround using the updatePlaylist endpoint\n\n    if comment or public:\n        self.update_playlist(new_playlist.id, comment=comment, public=public)\n        new_playlist.comment = comment\n        new_playlist.public = public\n\n    return new_playlist\n</code></pre>"},{"location":"reference/Playlists/#knuckles._playlists.Playlists.delete_playlist","title":"<code>delete_playlist(playlist_id)</code>","text":"<p>Delete a playlist.</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>The ID of the playlist to remove.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_playlists.py</code> <pre><code>def delete_playlist(self, playlist_id: str) -&gt; \"Subsonic\":\n    \"\"\"Delete a playlist.\n\n    Args:\n        playlist_id: The ID of the playlist to remove.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"deletePlaylist\", {\"id\": playlist_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Playlists/#knuckles._playlists.Playlists.get_playlist","title":"<code>get_playlist(playlist_id)</code>","text":"<p>Get all the info about a playlist available for the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>The ID of the playlist to get its info.</p> required <p>Returns:</p> Type Description <code>Playlist</code> <p>An object that holds all the info about the requested playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_playlists.py</code> <pre><code>def get_playlist(self, playlist_id: str) -&gt; Playlist:\n    \"\"\"Get all the info about a playlist available for the authenticated\n    user.\n\n    Args:\n        playlist_id: The ID of the playlist to get its info.\n\n    Returns:\n        An object that holds all the info about the requested playlist.\n    \"\"\"\n\n    response = self.api.json_request(\"getPlaylist\", {\"id\": playlist_id})[\"playlist\"]\n\n    return Playlist(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Playlists/#knuckles._playlists.Playlists.get_playlists","title":"<code>get_playlists(username=None)</code>","text":"<p>Get all the playlists available to the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str | None</code> <p>The username of another user if is wanted to get the playlists they can access.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Playlist]</code> <p>A list that holds all the info about all the playlist that the user can play.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_playlists.py</code> <pre><code>def get_playlists(self, username: str | None = None) -&gt; list[Playlist]:\n    \"\"\"Get all the playlists available to the authenticated user.\n\n    Args:\n        username: The username of another user if is wanted to get the\n            playlists they can access.\n\n    Returns:\n        A list that holds all the info about all the playlist\n            that the user can play.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getPlaylists\",\n        {\"username\": username} if username else {},\n    )[\"playlists\"][\"playlist\"]\n\n    playlists = [Playlist(self.subsonic, **playlist) for playlist in response]\n\n    return playlists\n</code></pre>"},{"location":"reference/Playlists/#knuckles._playlists.Playlists.update_playlist","title":"<code>update_playlist(playlist_id, name=None, comment=None, public=None, song_ids_to_add=None, song_indexes_to_remove=None)</code>","text":"<p>Update the info of a playlist.</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>The ID of the playlist to update its info.</p> required <code>name</code> <code>str | None</code> <p>A new name for the playlist.</p> <code>None</code> <code>comment</code> <code>str | None</code> <p>A new comment for the playlist.</p> <code>None</code> <code>public</code> <code>bool | None</code> <p>Change if the playlist should be public or private.</p> <code>None</code> <code>song_ids_to_add</code> <code>list[str] | None</code> <p>A list of IDs of new songs to be added to the playlist.</p> <code>None</code> <code>song_indexes_to_remove</code> <code>list[int] | None</code> <p>A list in indexes of songs that should be removed from the playlist.</p> <code>None</code> <p>Returns:</p> Type Description <code>Playlist</code> <p>An object that holds all the info about the updated playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_playlists.py</code> <pre><code>def update_playlist(\n    self,\n    playlist_id: str,\n    name: str | None = None,\n    comment: str | None = None,\n    public: bool | None = None,\n    song_ids_to_add: list[str] | None = None,\n    song_indexes_to_remove: list[int] | None = None,\n) -&gt; Playlist:\n    \"\"\"Update the info of a playlist.\n\n    Args:\n        playlist_id: The ID of the playlist to update its info.\n        name: A new name for the playlist.\n        comment: A new comment for the playlist.\n        public: Change if the playlist should be public or private.\n        song_ids_to_add: A list of IDs of new songs to be added to the\n            playlist.\n        song_indexes_to_remove: A list in indexes of songs that should\n            be removed from the playlist.\n\n    Returns:\n        An object that holds all the info about the updated playlist.\n    \"\"\"\n\n    self.api.json_request(\n        \"updatePlaylist\",\n        {\n            \"playlistId\": playlist_id,\n            \"name\": name,\n            \"comment\": comment,\n            \"public\": public,\n            \"songIdToAdd\": song_ids_to_add,\n            \"songIndexToRemove\": song_indexes_to_remove,\n        },\n    )\n\n    return Playlist(\n        self.subsonic, id=playlist_id, name=name, comment=comment, public=public\n    )\n</code></pre>"},{"location":"reference/Podcast/","title":"Podcast","text":""},{"location":"reference/Podcast/#knuckles._podcast.Podcast","title":"<code>Podcast(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the podcast endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.create_podcast_channel","title":"<code>create_podcast_channel(url)</code>","text":"<p>Create a new podcast channel</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the podcast to add.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def create_podcast_channel(self, url: str) -&gt; \"Subsonic\":\n    \"\"\"Create a new podcast channel\n\n    Args:\n        url: The URL of the podcast to add.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"createPodcastChannel\", {\"url\": url})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.delete_podcast_channel","title":"<code>delete_podcast_channel(podcast_channel_id)</code>","text":"<p>Delete a podcast channel.</p> <p>Parameters:</p> Name Type Description Default <code>podcast_channel_id</code> <code>str</code> <p>The ID of the podcast channel to delete.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def delete_podcast_channel(self, podcast_channel_id: str) -&gt; \"Subsonic\":\n    \"\"\"Delete a podcast channel.\n\n    Args:\n        podcast_channel_id: The ID of the podcast channel to delete.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"deletePodcastChannel\", {\"id\": podcast_channel_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.delete_podcast_episode","title":"<code>delete_podcast_episode(podcast_episode_id)</code>","text":"<p>Delete a podcast episode from the server.</p> <p>Parameters:</p> Name Type Description Default <code>podcast_episode_id</code> <code>str</code> <p>The ID of the podcast episode to delete.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def delete_podcast_episode(self, podcast_episode_id: str) -&gt; \"Subsonic\":\n    \"\"\"Delete a podcast episode from the server.\n\n    Args:\n        podcast_episode_id: The ID of the podcast episode to delete.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"deletePodcastEpisode\", {\"id\": podcast_episode_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.download_podcast_episode","title":"<code>download_podcast_episode(podcast_episode_id)</code>","text":"<p>Download a podcast episode to the server.</p> <p>Parameters:</p> Name Type Description Default <code>podcast_episode_id</code> <code>str</code> <p>The ID of the podcast episode to download to the server.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def download_podcast_episode(self, podcast_episode_id: str) -&gt; \"Subsonic\":\n    \"\"\"Download a podcast episode to the server.\n\n    Args:\n        podcast_episode_id: The ID of the podcast episode to download to\n            the server.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"downloadPodcastEpisode\", {\"id\": podcast_episode_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.get_newest_podcast_episodes","title":"<code>get_newest_podcast_episodes(number_max_episodes)</code>","text":"<p>Get all the info about the newest released podcast episodes.</p> <p>Parameters:</p> Name Type Description Default <code>number_max_episodes</code> <code>int</code> <p>The max number of episodes that the server should return.</p> required <p>Returns:</p> Type Description <code>list[Episode]</code> <p>A list that holds all the info about all the newest released episodes.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def get_newest_podcast_episodes(self, number_max_episodes: int) -&gt; list[Episode]:\n    \"\"\"Get all the info about the newest released podcast episodes.\n\n    Args:\n        number_max_episodes: The max number of episodes that the server\n            should return.\n\n    Returns:\n        A list that holds all the info about all the newest released\n            episodes.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getNewestPodcasts\", {\"count\": number_max_episodes}\n    )[\"newestPodcasts\"][\"episode\"]\n\n    return [Episode(self.subsonic, **episode) for episode in response]\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.get_podcast_channel","title":"<code>get_podcast_channel(podcast_channel_id, with_episodes=None)</code>","text":"<p>Get all the info about a podcast channel.</p> <p>Parameters:</p> Name Type Description Default <code>podcast_channel_id</code> <code>str</code> <p>The ID of the podcast channel to get its info.</p> required <code>with_episodes</code> <code>bool | None</code> <p>If the server should also return all the info about each episode of the podcast channel.</p> <code>None</code> <p>Returns:</p> Type Description <code>Channel</code> <p>An object that hold all the info about the requested podcast channel.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def get_podcast_channel(\n    self, podcast_channel_id: str, with_episodes: bool | None = None\n) -&gt; Channel:\n    \"\"\"Get all the info about a podcast channel.\n\n    Args:\n        podcast_channel_id: The ID of the podcast channel to get its info.\n        with_episodes: If the server should also return all the info\n            about each episode of the podcast channel.\n\n    Returns:\n        An object that hold all the info about the requested podcast\n            channel.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getPodcasts\", {\"id\": podcast_channel_id, \"includeEpisodes\": with_episodes}\n    )[\"podcasts\"][0]\n\n    return Channel(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.get_podcast_channels","title":"<code>get_podcast_channels(with_episodes=True)</code>","text":"<p>Get all the info about all the available podcasts channels in the server.</p> <p>Parameters:</p> Name Type Description Default <code>with_episodes</code> <code>bool</code> <p>If the server should also return all the info about each episode of each podcast channel</p> <code>True</code> <p>Returns:</p> Type Description <code>list[Channel]</code> <p>An list that hold all the info about all the available podcasts channels.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def get_podcast_channels(self, with_episodes: bool = True) -&gt; list[Channel]:\n    \"\"\"Get all the info about all the available podcasts channels in the\n    server.\n\n    Args:\n        with_episodes: If the server should also return all the info\n            about each episode of each podcast channel\n\n    Returns:\n        An list that hold all the info about all the available podcasts\n            channels.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"getPodcasts\", {\"includeEpisodes\": with_episodes}\n    )[\"podcasts\"]\n\n    return [Channel(self.subsonic, **channel) for channel in response]\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.get_podcast_episode","title":"<code>get_podcast_episode(episode_id)</code>","text":"<p>Get all the info about a podcast episode.</p> <p>Parameters:</p> Name Type Description Default <code>episode_id</code> <code>str</code> <p>The ID of the podcast episode to get its info.</p> required <p>Returns:</p> Type Description <code>Episode | None</code> <p>An object that holds all the info about the requested podcast episode.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def get_podcast_episode(self, episode_id: str) -&gt; Episode | None:\n    \"\"\"Get all the info about a podcast episode.\n\n    Args:\n        episode_id: The ID of the podcast episode to get its info.\n\n    Returns:\n        An object that holds all the info about the requested podcast\n            episode.\n    \"\"\"\n\n    channels = self.get_podcast_channels()\n\n    # Flatten the list of episodes inside the list of channels\n    list_of_episodes = [\n        episode\n        for channel in channels\n        if channel.episodes is not None\n        for episode in channel.episodes\n    ]\n\n    for episode in list_of_episodes:\n        if episode.id == episode_id:\n            return episode\n\n    return None\n</code></pre>"},{"location":"reference/Podcast/#knuckles._podcast.Podcast.refresh_podcasts","title":"<code>refresh_podcasts()</code>","text":"<p>Request the server to search for new podcast episodes.</p> <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_podcast.py</code> <pre><code>def refresh_podcasts(self) -&gt; \"Subsonic\":\n    \"\"\"Request the server to search for new podcast episodes.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"refreshPodcasts\")\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Searching/","title":"Searching","text":""},{"location":"reference/Searching/#knuckles._searching.Searching","title":"<code>Searching(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the bookmark endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_searching.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Searching/#knuckles._searching.Searching.search","title":"<code>search(query='', song_count=None, song_offset=None, album_count=None, album_offset=None, artist_count=None, artist_offset=None, music_folder_id=None)</code>","text":"<p>Search and find all the songs, albums and artists that whose title match the given query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query string to be send to the server.</p> <code>''</code> <code>song_count</code> <code>int | None</code> <p>The numbers of songs that the server should return.</p> <code>None</code> <code>song_offset</code> <code>int | None</code> <p>The number of songs to offset in the list, useful for pagination.</p> <code>None</code> <code>album_count</code> <code>int | None</code> <p>The numbers of albums that the server should return.</p> <code>None</code> <code>album_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>artist_count</code> <code>int | None</code> <p>The numbers of artists that the server should return.</p> <code>None</code> <code>artist_offset</code> <code>int | None</code> <p>The number of artists to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>An ID of a music folder to limit where the songs, albums and artists should come from.</p> <code>None</code> <p>Returns:</p> Type Description <code>SearchResult</code> <p>An object that contains all the info about the found songs, albums and artists received with the given query.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_searching.py</code> <pre><code>def search(\n    self,\n    query: str = \"\",\n    song_count: int | None = None,\n    song_offset: int | None = None,\n    album_count: int | None = None,\n    album_offset: int | None = None,\n    artist_count: int | None = None,\n    artist_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; SearchResult:\n    \"\"\"Search and find all the songs, albums and artists that\n    whose title match the given query.\n\n    Args:\n        query: The query string to be send to the server.\n        song_count: The numbers of songs that the server\n            should return.\n        song_offset: The number of songs to offset in the list,\n            useful for pagination.\n        album_count: The numbers of albums that the server\n            should return.\n        album_offset: The number of album to offset in the list,\n            useful for pagination.\n        artist_count: The numbers of artists that the server\n            should return.\n        artist_offset: The number of artists to offset in the list,\n            useful for pagination.\n        music_folder_id: An ID of a music folder to limit where the\n            songs, albums and artists should come from.\n\n    Returns:\n        An object that contains all the info about the found songs,\n            albums and artists received with the given query.\n    \"\"\"\n\n    return self._generic_search(\n        query,\n        song_count,\n        song_offset,\n        album_count,\n        album_offset,\n        artist_count,\n        artist_offset,\n    )\n</code></pre>"},{"location":"reference/Searching/#knuckles._searching.Searching.search_non_id3","title":"<code>search_non_id3(query, song_count=None, song_offset=None, album_count=None, album_offset=None, artist_count=None, artist_offset=None, music_folder_id=None)</code>","text":"<p>Search and find all the songs, albums and artists that whose title match the given query. Not organized according ID3 tags.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query string to be send to the server.</p> required <code>song_count</code> <code>int | None</code> <p>The numbers of songs that the server should return.</p> <code>None</code> <code>song_offset</code> <code>int | None</code> <p>The number of songs to offset in the list, useful for pagination.</p> <code>None</code> <code>album_count</code> <code>int | None</code> <p>The numbers of albums that the server should return.</p> <code>None</code> <code>album_offset</code> <code>int | None</code> <p>The number of album to offset in the list, useful for pagination.</p> <code>None</code> <code>artist_count</code> <code>int | None</code> <p>The numbers of artists that the server should return.</p> <code>None</code> <code>artist_offset</code> <code>int | None</code> <p>The number of artists to offset in the list, useful for pagination.</p> <code>None</code> <code>music_folder_id</code> <code>str | None</code> <p>An ID of a music folder to limit where the songs, albums and artists should come from.</p> <code>None</code> <p>Returns:</p> Type Description <code>SearchResult</code> <p>An object that contains all the info about the found songs, albums and artists received with the given query.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_searching.py</code> <pre><code>def search_non_id3(\n    self,\n    query: str,\n    song_count: int | None = None,\n    song_offset: int | None = None,\n    album_count: int | None = None,\n    album_offset: int | None = None,\n    artist_count: int | None = None,\n    artist_offset: int | None = None,\n    music_folder_id: str | None = None,\n) -&gt; SearchResult:\n    \"\"\"Search and find all the songs, albums and artists that\n    whose title match the given query. Not organized according\n    ID3 tags.\n\n    Args:\n        query: The query string to be send to the server.\n        song_count: The numbers of songs that the server\n            should return.\n        song_offset: The number of songs to offset in the list,\n            useful for pagination.\n        album_count: The numbers of albums that the server\n            should return.\n        album_offset: The number of album to offset in the list,\n            useful for pagination.\n        artist_count: The numbers of artists that the server\n            should return.\n        artist_offset: The number of artists to offset in the list,\n            useful for pagination.\n        music_folder_id: An ID of a music folder to limit where the\n            songs, albums and artists should come from.\n\n    Returns:\n        An object that contains all the info about the found songs,\n            albums and artists received with the given query.\n    \"\"\"\n\n    return self._generic_search(\n        query,\n        song_count,\n        song_offset,\n        album_count,\n        album_offset,\n        artist_count,\n        artist_offset,\n        music_folder_id,\n        False,\n    )\n</code></pre>"},{"location":"reference/Sharing/","title":"Sharing","text":""},{"location":"reference/Sharing/#knuckles._sharing.Sharing","title":"<code>Sharing(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the sharing endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_sharing.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/Sharing/#knuckles._sharing.Sharing.create_share","title":"<code>create_share(songs_ids, description=None, expires=None)</code>","text":"<p>Create a new share.</p> <p>Parameters:</p> Name Type Description Default <code>songs_ids</code> <code>list[str]</code> <p>A list that holds the IDs of all the songs that the share can give access to.</p> required <code>description</code> <code>str | None</code> <p>A description to be added with the share.</p> <code>None</code> <code>expires</code> <code>datetime | None</code> <p>A timestamp that marks when the share should be invalidated.</p> <code>None</code> <p>Returns:</p> Type Description <code>Share</code> <p>An object that holds all the info about the requested share.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_sharing.py</code> <pre><code>def create_share(\n    self,\n    songs_ids: list[str],\n    description: str | None = None,\n    expires: datetime | None = None,\n) -&gt; Share:\n    \"\"\"Create a new share.\n\n    Args:\n        songs_ids: A list that holds the IDs of all the songs\n            that the share can give access to.\n        description: A description to be added with the share.\n        expires: A timestamp that marks when the share should\n            be invalidated.\n\n    Returns:\n        An object that holds all the info about the requested share.\n    \"\"\"\n\n    response = self.api.json_request(\n        \"createShare\",\n        {\n            \"id\": songs_ids,\n            \"description\": description,\n            \"expires\": expires.timestamp() * 1000 if expires else None,\n        },\n    )[\"shares\"][\"share\"][0]\n\n    return Share(self.subsonic, **response)\n</code></pre>"},{"location":"reference/Sharing/#knuckles._sharing.Sharing.delete_share","title":"<code>delete_share(share_id)</code>","text":"<p>Delete a share from the server.</p> <p>Parameters:</p> Name Type Description Default <code>share_id</code> <code>str</code> <p>The ID of the server to delete.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_sharing.py</code> <pre><code>def delete_share(self, share_id: str) -&gt; \"Subsonic\":\n    \"\"\"Delete a share from the server.\n\n    Args:\n        share_id: The ID of the server to delete.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"deleteShare\", {\"id\": share_id})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/Sharing/#knuckles._sharing.Sharing.get_share","title":"<code>get_share(share_id)</code>","text":"<p>Get all the info about a share.</p> <p>Parameters:</p> Name Type Description Default <code>share_id</code> <code>str</code> <p>The ID of the share to get its info.</p> required <p>Returns:</p> Type Description <code>Share | None</code> <p>An object that holds all the info about the requested share.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_sharing.py</code> <pre><code>def get_share(self, share_id: str) -&gt; Share | None:\n    \"\"\"Get all the info about a share.\n\n    Args:\n        share_id: The ID of the share to get its info.\n\n    Returns:\n        An object that holds all the info about the requested\n            share.\n    \"\"\"\n\n    shares = self.get_shares()\n\n    for share in shares:\n        if share.id == share_id:\n            return share\n\n    return None\n</code></pre>"},{"location":"reference/Sharing/#knuckles._sharing.Sharing.get_shares","title":"<code>get_shares()</code>","text":"<p>Get all the shares manageable by the authenticated user.</p> <p>Returns:</p> Type Description <code>list[Share]</code> <p>A list that holds all the info about all the shares manageable by the user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_sharing.py</code> <pre><code>def get_shares(self) -&gt; list[Share]:\n    \"\"\"Get all the shares manageable by the authenticated user.\n\n    Returns:\n        A list that holds all the info about all the shares\n            manageable by the user.\n    \"\"\"\n\n    response = self.api.json_request(\"getShares\")[\"shares\"][\"share\"]\n\n    return [Share(self.subsonic, **share) for share in response]\n</code></pre>"},{"location":"reference/Sharing/#knuckles._sharing.Sharing.update_share","title":"<code>update_share(share_id, new_description=None, new_expires=None)</code>","text":"<p>Update the info of a share.</p> <p>Parameters:</p> Name Type Description Default <code>share_id</code> <code>str</code> <p>The ID of the share to update.</p> required <code>new_description</code> <code>str | None</code> <p>A new description to be added to the share.</p> <code>None</code> <code>new_expires</code> <code>datetime | None</code> <p>A new expire timestamp for the share.</p> <code>None</code> <p>Returns:</p> Type Description <code>Share</code> <p>An object that holds all the new updated info for the share.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_sharing.py</code> <pre><code>def update_share(\n    self,\n    share_id: str,\n    new_description: str | None = None,\n    new_expires: datetime | None = None,\n) -&gt; Share:\n    \"\"\"Update the info of a share.\n\n    Args:\n        share_id: The ID of the share to update.\n        new_description: A new description to be added to the share.\n        new_expires: A new expire timestamp for the share.\n\n    Returns:\n        An object that holds all the new updated info for the share.\n    \"\"\"\n\n    self.api.json_request(\n        \"updateShare\",\n        {\n            \"id\": share_id,\n            \"description\": new_description,\n            \"expires\": new_expires.timestamp() * 1000 if new_expires else None,\n        },\n    )\n\n    updated_share = Share(self.subsonic, share_id, description=new_description)\n\n    # Set it manually as the constructor expects ISO 6801 to convert it to datetime\n    # Instead of a datetime directly\n    updated_share.expires = new_expires\n\n    return updated_share\n</code></pre>"},{"location":"reference/Subsonic/","title":"Subsonic","text":""},{"location":"reference/Subsonic/#knuckles._subsonic.Subsonic","title":"<code>Subsonic(url, user, password, client, use_https=True, use_token=True, request_method=RequestMethod.GET)</code>","text":"<p>Object that holds all the other helper objects to interact with the OpenSubsonic REST API.</p> <p>Inside this object there are helper object that holds all the methods used to access the REST API. The methods are split following the categories listed in the OpenSubsonic REST API Spec.</p> <p>Attributes:</p> Name Type Description <code>api</code> <p>Helper object used to directly access the REST API of the given server.</p> <code>system</code> <p>Helper object used to access all system related endpoints.</p> <code>browsing</code> <p>Helper object used to access all system related endpoints.</p> <code>lists</code> <p>Helper object used to access all lists related endpoints.</p> <code>searching</code> <p>Helper object used to access all searching related endpoints.</p> <code>playlists</code> <p>Helper object used to access playlists related endpoints.</p> <code>media_retrieval</code> <p>Helper object used to access all media retrieval related endpoints.</p> <code>media_annotation</code> <p>Helper object used to access all media annotation related endpoints.</p> <code>sharing</code> <p>Helper object used to access all sharing related endpoints.</p> <code>podcast</code> <p>Helper object used to access all podcast related endpoints.</p> <code>jukebox</code> <p>Helper object used to access all jukebox related endpoints.</p> <code>internet_radio</code> <p>Helper object used to access all internet radio related endpoints.</p> <code>chat</code> <p>Helper object used to access all chat related endpoints.</p> <code>user_management</code> <p>Helper object used to access all user management related endpoints.</p> <code>bookmarks</code> <p>Helper object used to access all bookmarks related endpoints.</p> <code>media_library_scanning</code> <p>Helper object used to access all media library scanning related endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the Subsonic server to connect to.</p> required <code>user</code> <code>str</code> <p>The name of the user to authenticate.</p> required <code>password</code> <code>str</code> <p>The password of the user to authenticate.</p> required <code>client</code> <code>str</code> <p>A unique name of the client to report to the server.</p> required <code>use_https</code> <code>bool</code> <p>If the requests should be use of HTTPS.</p> <code>True</code> <code>use_token</code> <code>bool</code> <p>If the authentication should be made using a salted token or in plain text.</p> <code>True</code> <code>request_method</code> <code>RequestMethod</code> <p>If the requests should be made using a GET verb or a POST verb.</p> <code>GET</code> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_subsonic.py</code> <pre><code>def __init__(\n    self,\n    url: str,\n    user: str,\n    password: str,\n    client: str,\n    use_https: bool = True,\n    use_token: bool = True,\n    request_method: RequestMethod = RequestMethod.GET,\n) -&gt; None:\n    \"\"\"Construction method of the Subsonic object used to\n    interact with the OpenSubsonic REST API.\n\n    Args:\n        url: The URL of the Subsonic server to connect to.\n        user: The name of the user to authenticate.\n        password: The password of the user to authenticate.\n        client: A unique name of the client to report to the\n            server.\n        use_https: If the requests should be use of HTTPS.\n        use_token: If the authentication should be made\n            using a salted token or in plain text.\n        request_method: If the requests should be made\n            using a GET verb or a POST verb.\n    \"\"\"\n\n    self.api = Api(\n        url, user, password, client, use_https, use_token, request_method\n    )\n    self.system = System(self.api, self)\n    self.browsing = Browsing(self.api, self)\n    self.lists = Lists(self.api, self)\n    self.searching = Searching(self.api, self)\n    self.playlists = Playlists(self.api, self)\n    self.media_retrieval = MediaRetrieval(self.api, self)\n    self.media_annotation = MediaAnnotation(self.api, self)\n    self.sharing = Sharing(self.api, self)\n    self.podcast = Podcast(self.api, self)\n    self.jukebox = JukeboxControl(self.api, self)\n    self.internet_radio = InternetRadio(self.api, self)\n    self.chat = Chat(self.api, self)\n    self.user_management = UserManagement(self.api, self)\n    self.bookmarks = Bookmarks(self.api, self)\n    self.media_library_scanning = MediaLibraryScanning(self.api, self)\n</code></pre>"},{"location":"reference/System/","title":"System","text":""},{"location":"reference/System/#knuckles._system.System","title":"<code>System(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the system endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_system.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n\n    # Only to pass it to the models\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/System/#knuckles._system.System.check_open_subsonic_extension","title":"<code>check_open_subsonic_extension(extension_name, extension_version)</code>","text":"<p>Check if a OpenSubonic REST API extension is available on the connected server.</p> <p>Parameters:</p> Name Type Description Default <code>extension_name</code> <code>str</code> <p>The name of the extension to check if its available.</p> required <code>extension_version</code> <code>int</code> <p>The version of the extension to check if its available.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>If the given extension at the given version is available on the connected server or not.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_system.py</code> <pre><code>def check_open_subsonic_extension(\n    self, extension_name: str, extension_version: int\n) -&gt; bool:\n    \"\"\"Check if a OpenSubonic REST API extension is available on the\n    connected server.\n\n    Args:\n        extension_name: The name of the extension to check if its\n            available.\n        extension_version: The version of the extension to check if\n            its available.\n\n    Returns:\n        If the given extension at the given version is available on\n            the connected server or not.\n    \"\"\"\n\n    extensions = self.get_open_subsonic_extensions()\n\n    for extension in extensions:\n        if extension.name != extension_name:\n            continue\n\n        if extension_version in extension.versions:\n            return True\n\n    return False\n</code></pre>"},{"location":"reference/System/#knuckles._system.System.get_license","title":"<code>get_license()</code>","text":"<p>Get the current status of the license of the server.</p> <p>Returns:</p> Type Description <code>License</code> <p>An object that contains all the info about the status of the license of the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_system.py</code> <pre><code>def get_license(self) -&gt; License:\n    \"\"\"Get the current status of the license of the server.\n\n    Returns:\n        An object that contains all the info about the status\n            of the license of the server.\n    \"\"\"\n\n    response = self.api.json_request(\"getLicense\")[\"license\"]\n\n    return License(self.subsonic, **response)\n</code></pre>"},{"location":"reference/System/#knuckles._system.System.get_open_subsonic_extensions","title":"<code>get_open_subsonic_extensions()</code>","text":"<p>Get all the available OpenSubsonic REST API extensions for the connected server.</p> <p>Returns:</p> Type Description <code>list[OpenSubsonicExtension]</code> <p>A list that contains all the info about all the available extensions in the connected server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_system.py</code> <pre><code>def get_open_subsonic_extensions(self) -&gt; list[OpenSubsonicExtension]:\n    \"\"\"Get all the available OpenSubsonic REST API extensions for the\n    connected server.\n\n    Returns:\n        A list that contains all the info about all the available\n            extensions in the connected server.\n    \"\"\"\n\n    response = self.api.json_request(\"getOpenSubsonicExtensions\")[\n        \"openSubsonicExtensions\"\n    ]\n    return [\n        OpenSubsonicExtension(name, versions) for name, versions in response.items()\n    ]\n</code></pre>"},{"location":"reference/System/#knuckles._system.System.ping","title":"<code>ping()</code>","text":"<p>Make a ping to the server.</p> <p>Returns:</p> Type Description <code>SubsonicResponse</code> <p>An object that holds all the info returned by the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_system.py</code> <pre><code>def ping(self) -&gt; SubsonicResponse:\n    \"\"\"Make a ping to the server.\n\n    Returns:\n        An object that holds all the info returned by the server.\n    \"\"\"\n\n    response = self.api.json_request(\"ping\")\n\n    return SubsonicResponse(self.subsonic, **response)\n</code></pre>"},{"location":"reference/User%20Management/","title":"User Management","text":""},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement","title":"<code>UserManagement(api, subsonic)</code>","text":"<p>Class that contains all the methods needed to interact with the user management endpoints in the Subsonic API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def __init__(self, api: Api, subsonic: \"Subsonic\") -&gt; None:\n    self.api = api\n    self.subsonic = subsonic\n</code></pre>"},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement.change_password","title":"<code>change_password(username, new_password)</code>","text":"<p>Change the password of a user.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to change its password.</p> required <code>new_password</code> <code>str</code> <p>The new password for the user.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def change_password(self, username: str, new_password: str) -&gt; \"Subsonic\":\n    \"\"\"Change the password of a user.\n\n    Args:\n        username: The username of the user to change its password.\n        new_password: The new password for the user.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\n        \"changePassword\", {\"username\": username, \"password\": new_password}\n    )\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement.create_user","title":"<code>create_user(username, password, email, ldap_authenticated=None, admin_role=None, settings_role=None, stream_role=None, jukebox_role=None, download_role=None, upload_role=None, playlist_role=None, cover_art_role=None, comment_role=None, podcast_role=None, share_role=None, video_conversion_role=None, music_folder_id=None, max_bit_rate=None)</code>","text":"<p>Create a new user in the server.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to create.</p> required <code>password</code> <code>str</code> <p>The password of the user to create.</p> required <code>email</code> <code>str</code> <p>The email of the user to create.</p> required <code>ldap_authenticated</code> <code>bool | None</code> <p>If the user is authenticated in a LDAP server.</p> <code>None</code> <code>admin_role</code> <code>bool | None</code> <p>If the user should be an administrator.</p> <code>None</code> <code>settings_role</code> <code>bool | None</code> <p>If the user is allowed to change its personal settings and password.</p> <code>None</code> <code>stream_role</code> <code>bool | None</code> <p>If the user should be allowed to stream songs and videos.</p> <code>None</code> <code>jukebox_role</code> <code>bool | None</code> <p>If the user should be able to play songs in the jukebox.</p> <code>None</code> <code>download_role</code> <code>bool | None</code> <p>If the user should be able to download files from the server.</p> <code>None</code> <code>upload_role</code> <code>bool | None</code> <p>If the user should be allowed to upload files to the server.</p> <code>None</code> <code>playlist_role</code> <code>bool | None</code> <p>If the user should be able to create and delete playlists.</p> <code>None</code> <code>cover_art_role</code> <code>bool | None</code> <p>If the user should be allowed to change cover art and tags of songs.</p> <code>None</code> <code>comment_role</code> <code>bool | None</code> <p>If the user is allowed to create and edit comments and ratings.</p> <code>None</code> <code>podcast_role</code> <code>bool | None</code> <p>If the user should be allowed to administrate podcasts.</p> <code>None</code> <code>share_role</code> <code>bool | None</code> <p>If the user should be able to create share links.</p> <code>None</code> <code>video_conversion_role</code> <code>bool | None</code> <p>If the use should be allowed to start video conversion in the server.</p> <code>None</code> <code>music_folder_id</code> <code>list[str] | None</code> <p>A list of IDs where the used should have access to. If no one is specified all of them will be accessible.</p> <code>None</code> <code>max_bit_rate</code> <code>int | None</code> <p>The max bitrate that the user should be able to stream.</p> <code>None</code> <p>Returns:</p> Type Description <code>User</code> <p>An object that holds all the info about the new created user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def create_user(\n    self,\n    username: str,\n    password: str,\n    email: str,\n    ldap_authenticated: bool | None = None,\n    admin_role: bool | None = None,\n    settings_role: bool | None = None,\n    stream_role: bool | None = None,\n    jukebox_role: bool | None = None,\n    download_role: bool | None = None,\n    upload_role: bool | None = None,\n    playlist_role: bool | None = None,\n    cover_art_role: bool | None = None,\n    comment_role: bool | None = None,\n    podcast_role: bool | None = None,\n    share_role: bool | None = None,\n    video_conversion_role: bool | None = None,\n    music_folder_id: list[str] | None = None,\n    max_bit_rate: int | None = None,\n) -&gt; User:\n    \"\"\"Create a new user in the server.\n\n    Args:\n        username: The username of the user to create.\n        password: The password of the user to create.\n        email: The email of the user to create.\n        ldap_authenticated: If the user is authenticated in a LDAP server.\n        admin_role: If the user should be an administrator.\n        settings_role: If the user is allowed to change its\n            personal settings and password.\n        stream_role: If the user should be allowed to stream songs and\n            videos.\n        jukebox_role: If the user should be able to play songs in the\n            jukebox.\n        download_role: If the user should be able to download files from\n            the server.\n        upload_role: If the user should be allowed to upload files to\n            the server.\n        playlist_role: If the user should be able to create and delete\n            playlists.\n        cover_art_role: If the user should be allowed to change cover\n            art and tags of songs.\n        comment_role: If the user is allowed to create and edit\n            comments and ratings.\n        podcast_role: If the user should be allowed to administrate\n            podcasts.\n        share_role: If the user should be able to create share links.\n        video_conversion_role: If the use should be allowed to\n            start video conversion in the server.\n        music_folder_id: A list of IDs where the used should have access\n            to. If no one is specified all of them will be accessible.\n        max_bit_rate: The max bitrate that the user should be able to\n            stream.\n\n    Returns:\n        An object that holds all the info about the new created user.\n    \"\"\"\n\n    self.api.json_request(\n        \"createUser\",\n        {\n            \"username\": username,\n            \"password\": password,\n            \"email\": email,\n            \"ldapAuthenticated\": ldap_authenticated,\n            \"adminRole\": admin_role,\n            \"settingsRole\": settings_role,\n            \"streamRole\": stream_role,\n            \"jukeboxRole\": jukebox_role,\n            \"downloadRole\": download_role,\n            \"uploadRole\": upload_role,\n            \"playlistRole\": playlist_role,\n            \"coverArtRole\": cover_art_role,\n            \"commentRole\": comment_role,\n            \"podcastRole\": podcast_role,\n            \"shareRole\": share_role,\n            \"videoConversionRole\": video_conversion_role,\n            \"musicFolderId\": music_folder_id,\n            \"maxBitRate\": max_bit_rate,\n        },\n    )\n\n    # Attach the Subsonic object\n    new_user = User(\n        self.subsonic,\n        username,\n        password,\n        email,\n        ldap_authenticated,\n        admin_role,\n        settings_role,\n        stream_role,\n        jukebox_role,\n        download_role,\n        upload_role,\n        playlist_role,\n        cover_art_role,\n        comment_role,\n        podcast_role,\n        share_role,\n        video_conversion_role,\n        music_folder_id,\n        max_bit_rate,\n    )\n\n    return new_user\n</code></pre>"},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement.delete_user","title":"<code>delete_user(username)</code>","text":"<p>Delete a user from the server.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to delete.</p> required <p>Returns:</p> Type Description <code>Subsonic</code> <p>The Subsonic object where this method was called to allow method chaining.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def delete_user(self, username: str) -&gt; \"Subsonic\":\n    \"\"\"Delete a user from the server.\n\n    Args:\n        username: The username of the user to delete.\n\n    Returns:\n        The Subsonic object where this method was called to allow\n            method chaining.\n    \"\"\"\n\n    self.api.json_request(\"deleteUser\", {\"username\": username})\n\n    return self.subsonic\n</code></pre>"},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement.get_user","title":"<code>get_user(username)</code>","text":"<p>Get all the info about a user.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to get its info.</p> required <p>Returns:</p> Type Description <code>User</code> <p>An object that holds all the info about the requested user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def get_user(self, username: str) -&gt; User:\n    \"\"\"Get all the info about a user.\n\n    Args:\n        username: The username of the user to get its info.\n\n    Returns:\n        An object that holds all the info about the requested user.\n    \"\"\"\n    request = self.api.json_request(\"getUser\", {\"username\": username})[\"user\"]\n\n    return User(\n        self.subsonic,\n        request[\"username\"],\n        request[\"password\"],\n        request[\"email\"],\n        request[\"ldapAuthenticated\"],\n        request[\"adminRole\"],\n        request[\"settingsRole\"],\n        request[\"streamRole\"],\n        request[\"jukeboxRole\"],\n        request[\"downloadRole\"],\n        request[\"uploadRole\"],\n        request[\"playlistRole\"],\n        request[\"coverArtRole\"],\n        request[\"commentRole\"],\n        request[\"podcastRole\"],\n        request[\"shareRole\"],\n        request[\"videoConversionRole\"],\n        request[\"musicFolderId\"],\n        request[\"maxBitRate\"],\n    )\n</code></pre>"},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement.get_users","title":"<code>get_users()</code>","text":"<p>Get all the users registered in the server.</p> <p>Returns:</p> Type Description <code>list[User]</code> <p>A list that holds all the info about all the available users in the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def get_users(self) -&gt; list[User]:\n    \"\"\"Get all the users registered in the server.\n\n    Returns:\n        A list that holds all the info about all the available\n            users in the server.\n    \"\"\"\n\n    request = self.api.json_request(\"getUsers\")[\"users\"][\"user\"]\n\n    users: list[User] = []\n    for user in request:\n        users.append(\n            User(\n                self.subsonic,\n                user[\"username\"],\n                user[\"password\"],\n                user[\"email\"],\n                user[\"ldapAuthenticated\"],\n                user[\"adminRole\"],\n                user[\"settingsRole\"],\n                user[\"streamRole\"],\n                user[\"jukeboxRole\"],\n                user[\"downloadRole\"],\n                user[\"uploadRole\"],\n                user[\"playlistRole\"],\n                user[\"coverArtRole\"],\n                user[\"commentRole\"],\n                user[\"podcastRole\"],\n                user[\"shareRole\"],\n                user[\"videoConversionRole\"],\n                user[\"musicFolderId\"],\n                user[\"maxBitRate\"],\n            )\n        )\n\n    return users\n</code></pre>"},{"location":"reference/User%20Management/#knuckles._user_management.UserManagement.update_user","title":"<code>update_user(username, password=None, email=None, ldap_authenticated=None, admin_role=None, settings_role=None, stream_role=None, jukebox_role=None, download_role=None, upload_role=None, playlist_role=None, cover_art_role=None, comment_role=None, podcast_role=None, share_role=None, video_conversion_role=None, music_folder_id=None, max_bit_rate=None)</code>","text":"<p>Update the info of a user.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to update.</p> required <code>password</code> <code>str | None</code> <p>The password of the user to update.</p> <code>None</code> <code>email</code> <code>str | None</code> <p>The email of the user to update.</p> <code>None</code> <code>ldap_authenticated</code> <code>bool | None</code> <p>If the user is authenticated in a LDAP server.</p> <code>None</code> <code>admin_role</code> <code>bool | None</code> <p>If the user should be an administrator.</p> <code>None</code> <code>settings_role</code> <code>bool | None</code> <p>If the user is allowed to change its personal settings and password.</p> <code>None</code> <code>stream_role</code> <code>bool | None</code> <p>If the user should be allowed to stream songs and videos.</p> <code>None</code> <code>jukebox_role</code> <code>bool | None</code> <p>If the user should be able to play songs in the jukebox.</p> <code>None</code> <code>download_role</code> <code>bool | None</code> <p>If the user should be able to download files from the server.</p> <code>None</code> <code>upload_role</code> <code>bool | None</code> <p>If the user should be allowed to upload files to the server.</p> <code>None</code> <code>playlist_role</code> <code>bool | None</code> <p>If the user should be able to create and delete playlists.</p> <code>None</code> <code>cover_art_role</code> <code>bool | None</code> <p>If the user should be allowed to change cover art and tags of songs.</p> <code>None</code> <code>comment_role</code> <code>bool | None</code> <p>If the user is allowed to create and edit comments and ratings.</p> <code>None</code> <code>podcast_role</code> <code>bool | None</code> <p>If the user should be allowed to administrate podcasts.</p> <code>None</code> <code>share_role</code> <code>bool | None</code> <p>If the user should be able to create share links.</p> <code>None</code> <code>video_conversion_role</code> <code>bool | None</code> <p>If the use should be allowed to start video conversion in the server.</p> <code>None</code> <code>music_folder_id</code> <code>list[str] | None</code> <p>A list of IDs where the used should have access to. If no one is specified all of them will be accessible.</p> <code>None</code> <code>max_bit_rate</code> <code>int | None</code> <p>The max bitrate that the user should be able to stream.</p> <code>None</code> <p>Returns:</p> Type Description <code>User</code> <p>An object that holds all the info about the update user.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/_user_management.py</code> <pre><code>def update_user(\n    self,\n    username: str,\n    password: str | None = None,\n    email: str | None = None,\n    ldap_authenticated: bool | None = None,\n    admin_role: bool | None = None,\n    settings_role: bool | None = None,\n    stream_role: bool | None = None,\n    jukebox_role: bool | None = None,\n    download_role: bool | None = None,\n    upload_role: bool | None = None,\n    playlist_role: bool | None = None,\n    cover_art_role: bool | None = None,\n    comment_role: bool | None = None,\n    podcast_role: bool | None = None,\n    share_role: bool | None = None,\n    video_conversion_role: bool | None = None,\n    music_folder_id: list[str] | None = None,\n    max_bit_rate: int | None = None,\n) -&gt; User:\n    \"\"\"Update the info of a user.\n\n    Args:\n        username: The username of the user to update.\n        password: The password of the user to update.\n        email: The email of the user to update.\n        ldap_authenticated: If the user is authenticated in a LDAP server.\n        admin_role: If the user should be an administrator.\n        settings_role: If the user is allowed to change its\n            personal settings and password.\n        stream_role: If the user should be allowed to stream songs and\n            videos.\n        jukebox_role: If the user should be able to play songs in the\n            jukebox.\n        download_role: If the user should be able to download files from\n            the server.\n        upload_role: If the user should be allowed to upload files to\n            the server.\n        playlist_role: If the user should be able to create and delete\n            playlists.\n        cover_art_role: If the user should be allowed to change cover\n            art and tags of songs.\n        comment_role: If the user is allowed to create and edit\n            comments and ratings.\n        podcast_role: If the user should be allowed to administrate\n            podcasts.\n        share_role: If the user should be able to create share links.\n        video_conversion_role: If the use should be allowed to\n            start video conversion in the server.\n        music_folder_id: A list of IDs where the used should have access\n            to. If no one is specified all of them will be accessible.\n        max_bit_rate: The max bitrate that the user should be able to\n            stream.\n\n    Returns:\n        An object that holds all the info about the update user.\n    \"\"\"\n\n    self.api.json_request(\n        \"updateUser\",\n        {\n            \"username\": username,\n            \"password\": password,\n            \"email\": email,\n            \"ldapAuthenticated\": ldap_authenticated,\n            \"adminRole\": admin_role,\n            \"settingsRole\": settings_role,\n            \"streamRole\": stream_role,\n            \"jukeboxRole\": jukebox_role,\n            \"downloadRole\": download_role,\n            \"uploadRole\": upload_role,\n            \"playlistRole\": playlist_role,\n            \"coverArtRole\": cover_art_role,\n            \"commentRole\": comment_role,\n            \"podcastRole\": podcast_role,\n            \"shareRole\": share_role,\n            \"videoConversionRole\": video_conversion_role,\n            \"musicFolderId\": music_folder_id,\n            \"maxBitRate\": max_bit_rate,\n        },\n    )\n\n    updated_user = User(\n        self.subsonic,\n        username,\n        password,\n        email,\n        ldap_authenticated,\n        admin_role,\n        settings_role,\n        stream_role,\n        jukebox_role,\n        download_role,\n        upload_role,\n        playlist_role,\n        cover_art_role,\n        comment_role,\n        podcast_role,\n        share_role,\n        video_conversion_role,\n        music_folder_id,\n        max_bit_rate,\n    )\n\n    return updated_user\n</code></pre>"},{"location":"reference/summary/","title":"Summary","text":"<ul> <li>Reference<ul> <li>Api</li> <li>Bookmarks</li> <li>Browsing</li> <li>Chat</li> <li>Internet Radio</li> <li>Jukebox</li> <li>Lists</li> <li>Media Annotation</li> <li>Media Library Scanning</li> <li>Media Retrieval</li> <li>Playlists</li> <li>Podcast</li> <li>Searching</li> <li>Sharing</li> <li>Subsonic</li> <li>System</li> <li>User Management</li> <li>Exceptions</li> <li>Models<ul> <li>Album</li> <li>Artist</li> <li>Artist Index</li> <li>Bookmark</li> <li>Chat Message</li> <li>Contributor</li> <li>Cover Art</li> <li>Genre</li> <li>Internet Radio Station</li> <li>Jukebox</li> <li>Lyrics</li> <li>Model</li> <li>Music Directory</li> <li>Music Folder</li> <li>Now Playing Entry</li> <li>Play Queue</li> <li>Playlist</li> <li>Podcast</li> <li>Replay Gain</li> <li>Scan Status</li> <li>Search Result</li> <li>Share</li> <li>Song</li> <li>Starred Content</li> <li>System</li> <li>User</li> <li>Video</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/models/Album/","title":"Album","text":""},{"location":"reference/models/Album/#knuckles.models._album.Album","title":"<code>Album(subsonic, id, parent=None, album=None, title=None, name=None, isDir=None, artist=None, artistId=None, coverArt=None, songCount=None, duration=None, playCount=None, created=None, starred=None, year=None, genre=None, played=None, userRating=None, song=None, recordLabels=None, musicBrainzId=None, genres=None, artists=None, displayArtist=None, releaseTypes=None, moods=None, sortName=None, originalReleaseDate=None, releaseDate=None, isCompilation=None, discTitles=None, **kargs)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info of an album.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the album.</p> <code>parent</code> <code>str |\u00a0None</code> <p>The ID of the parent media of the album.</p> <code>name</code> <code>str | None</code> <p>The name of the album.</p> <code>album</code> <code>str | None</code> <p>The name of the album (Can differ the <code>name</code> and <code>title</code> attributes, **not documented in the OpenSubsonic Spec).</p> <code>is_dir</code> <code>bool | None</code> <p>If the album is a directory.</p> <code>title</code> <code>str | None</code> <p>The name of the album (Can differ the <code>name</code> and <code>album</code> attributes, **not documented in the OpenSubsonic Spec).</p> <code>artist</code> <code>Artist | None</code> <p>The artist of the album.</p> <code>cover_art</code> <code>CoverArt</code> <p>All the info about the cover art of the album.</p> <code>song_count</code> <code>int | None</code> <p>The number of songs inside the album.</p> <code>duration</code> <code>int | None</code> <p>The total duration of the album in seconds.</p> <code>play_count</code> <code>int | None</code> <p>The times the album has been played.</p> <code>created</code> <code>datetime | None</code> <p>The timestamp when the album was created.</p> <code>starred</code> <code>datetime | None</code> <p>The timestamp when the album was starred if it is.</p> <code>year</code> <code>int | None</code> <p>The year when the album was released.</p> <code>genre</code> <code>str | None</code> <p>The genre of the album.</p> <code>played</code> <code>datetime | None</code> <p>The timestamp when the album was played.</p> <code>user_rating</code> <code>int | None</code> <p>The rating from 0 to 5 (inclusive) that the used has given to the album if it is rated.</p> <code>songs</code> <code>list[Song] | None</code> <p>The list of songs that the album contains.</p> <code>info</code> <code>AlbumInfo | None</code> <p>Extra info about the album.</p> <code>record_labels</code> <code>list[RecordLabel] | None</code> <p>List of all the record labels that have licensed the album.</p> <code>music_brainz_id</code> <code>str | None</code> <p>The ID of the MusicBrainz database entry of the album.</p> <code>genres</code> <code>list[ItemGenre] | None</code> <p>List of all the genres that the album has.</p> <code>artists</code> <code>list[Artist] | None</code> <p>List of all the artists involved with the album.</p> <code>display_artist</code> <code>str\u00a0| None</code> <p>String that condense all the artists involved with the album.</p> <code>release_types</code> <code>list[str] | None</code> <p>The types of album that the album is.</p> <code>moods</code> <code>list[str] | None</code> <p>List of all the moods that the album has.</p> <code>sort_name</code> <code>str | None</code> <p>The name of the album used for sorting.</p> <code>original_release_date</code> <code>ReleaseDate | None</code> <p>The original release date of the album.</p> <code>release_date</code> <code>ReleaseDate | None</code> <p>The release date of the album.</p> <code>is_compilation</code> <code>bool | None</code> <p>If the album is a compilation or not.</p> <code>discs</code> <code>list[Disc] | None</code> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    parent: str | None = None,\n    album: str | None = None,\n    title: str | None = None,\n    name: str | None = None,\n    isDir: bool | None = None,\n    artist: str | None = None,\n    artistId: str | None = None,\n    coverArt: str | None = None,\n    songCount: int | None = None,\n    duration: int | None = None,\n    playCount: int | None = None,\n    created: str | None = None,\n    starred: str | None = None,\n    year: int | None = None,\n    genre: str | None = None,\n    played: str | None = None,\n    userRating: int | None = None,\n    song: list[dict[str, Any]] | None = None,\n    recordLabels: list[dict[str, Any]] | None = None,\n    musicBrainzId: str | None = None,\n    genres: list[dict[str, Any]] | None = None,\n    artists: list[dict[str, Any]] | None = None,\n    displayArtist: str | None = None,\n    releaseTypes: list[str] | None = None,\n    moods: list[str] | None = None,\n    sortName: str | None = None,\n    originalReleaseDate: dict[str, Any] | None = None,\n    releaseDate: dict[str, Any] | None = None,\n    isCompilation: bool | None = None,\n    discTitles: list[dict[str, Any]] | None = None,\n    **kargs,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.parent = parent\n    self.album = album\n    self.name = name\n    self.is_dir = isDir\n    self.title = title\n    self.artist = Artist(self._subsonic, artistId, artist) if artistId else None\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.song_count = songCount\n    self.duration = duration\n    self.play_count = playCount\n    self.created = parser.parse(created) if created else None\n    self.starred = parser.parse(starred) if starred else None\n    self.year = year\n    self.genre = genre\n    self.played = parser.parse(played) if played else None\n    self.user_rating = userRating\n    self.songs = (\n        [song_model_module.Song(self._subsonic, **song_data) for song_data in song]\n        if song\n        else None\n    )\n    self.info: AlbumInfo | None = None\n    self.record_labels = (\n        [\n            RecordLabel(self._subsonic, **record_label)\n            for record_label in recordLabels\n        ]\n        if recordLabels\n        else None\n    )\n    self.music_brainz_id = musicBrainzId\n    self.genres = (\n        [ItemGenre(self._subsonic, **genre) for genre in genres] if genres else None\n    )\n    self.artists = (\n        [Artist(self._subsonic, **artist) for artist in artists]\n        if artists\n        else None\n    )\n    self.display_artist = displayArtist\n    self.release_types = releaseTypes\n    self.moods = moods\n    self.sort_name = sortName\n    self.original_release_date = (\n        ReleaseDate(self._subsonic, **originalReleaseDate)\n        if originalReleaseDate\n        else None\n    )\n    self.release_date = (\n        ReleaseDate(self._subsonic, **releaseDate) if releaseDate else None\n    )\n    self.is_compilation = isCompilation\n    self.discs = (\n        [Disc(self._subsonic, **disc) for disc in discTitles]\n        if discTitles\n        else None\n    )\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.Album.generate","title":"<code>generate()</code>","text":"<p>Return a new album object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Album</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def generate(self) -&gt; \"Album\":\n    \"\"\"Return a new album object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    new_album = self._subsonic.browsing.get_album(self.id)\n    new_album.get_album_info()\n\n    return new_album\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.Album.get_album_info","title":"<code>get_album_info()</code>","text":"<p>Get all the extra info about the album, it's set to the <code>info</code> attribute of the object.</p> <p>Returns:</p> Type Description <code>AlbumInfo</code> <p>The extra info returned by the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def get_album_info(self) -&gt; AlbumInfo:\n    \"\"\"Get all the extra info about the album, it's\n    set to the `info` attribute of the object.\n\n    Returns:\n        The extra info returned by the server.\n    \"\"\"\n\n    self.info = self._subsonic.browsing.get_album_info(self.id)\n\n    return self.info\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.AlbumInfo","title":"<code>AlbumInfo(subsonic, album_id, notes=None, musicBrainzId=None, lastFmUrl=None, smallImageUrl=None, mediumImageUrl=None, largeImageUrl=None, **kargs)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about the extra info of an album.</p> <p>Attributes:</p> Name Type Description <code>album_id</code> <code>str</code> <p>The ID of the album where the extra info is from.</p> <code>notes</code> <code>str</code> <p>Notes of the album.</p> <code>music_brainz_id</code> <code>str | None</code> <p>The music brainz ID of the album.</p> <code>last_fm_url</code> <code>str | None</code> <p>The last.fm URL of the album</p> <code>small_image_user</code> <code>str | None</code> <p>The URL of the small sized image of the album.</p> <code>medium_image_user</code> <code>str | None</code> <p>The URL of the medium sized image of the album.</p> <code>large_image_user</code> <code>str | None</code> <p>The URL of the large sized image of the album.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    album_id: str,\n    notes: str | None = None,\n    musicBrainzId: str | None = None,\n    lastFmUrl: str | None = None,\n    smallImageUrl: str | None = None,\n    mediumImageUrl: str | None = None,\n    largeImageUrl: str | None = None,\n    **kargs,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.album_id = album_id\n    self.notes = notes\n    self.music_brainz_id = musicBrainzId\n    self.last_fm_url = lastFmUrl\n    self.small_image_url = smallImageUrl\n    self.medium_image_url = mediumImageUrl\n    self.large_image_url = largeImageUrl\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.AlbumInfo.generate","title":"<code>generate()</code>","text":"<p>Return a new album info object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>AlbumInfo</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def generate(self) -&gt; \"AlbumInfo\":\n    \"\"\"Return a new album info object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    return self._subsonic.browsing.get_album_info(self.album_id)\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.Disc","title":"<code>Disc(subsonic, disc, title)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a disc.</p> <p>Attributes:</p> Name Type Description <code>disc_number</code> <code>int</code> <p>The number of the disc.</p> <code>title</code> <code>str</code> <p>The title of the disc.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", disc: int, title: str) -&gt; None:\n    super().__init__(subsonic)\n\n    self.disc_number = disc\n    self.title = title\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.RecordLabel","title":"<code>RecordLabel(subsonic, name)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a record label.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the record label.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", name: str) -&gt; None:\n    super().__init__(subsonic)\n\n    self.name = name\n</code></pre>"},{"location":"reference/models/Album/#knuckles.models._album.ReleaseDate","title":"<code>ReleaseDate(subsonic, year=None, month=None, day=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about the release date of a media.</p> <p>Attributes:</p> Name Type Description <code>year</code> <code>int</code> <p>The year when it was released.</p> <code>month</code> <code>int</code> <p>The month when it was released.</p> <code>day</code> <code>int</code> <p>The day when it was released.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_album.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    year: int | None = None,\n    month: int | None = None,\n    day: int | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.year = year\n    self.month = month\n    self.day = day\n</code></pre>"},{"location":"reference/models/Artist%20Index/","title":"Artist Index","text":""},{"location":"reference/models/Artist%20Index/#knuckles.models._artist_index.ArtistIndex","title":"<code>ArtistIndex(subsonic, ignoredArticles, index=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about an artist index.</p> <p>Attributes:</p> Name Type Description <code>ignored_articles</code> <code>list[str]</code> <p>Ignored articles in the index.</p> <code>index</code> <code>dict[str, list[Artist]] | None</code> <p>Dictionary that holds the index, where the key is the index letter and the value a list of objects that holds all the info related with the artists in that are in the given index.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_artist_index.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    ignoredArticles: str,\n    index: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.ignored_articles = ignoredArticles\n\n    self.index: dict[str, list[Artist]] | None\n\n    if index is None:\n        self.index = None\n        return\n\n    self.index = {}\n\n    for entry in index:\n        self.index[entry[\"name\"]] = [\n            Artist(subsonic=self._subsonic, **artist) for artist in entry[\"artist\"]\n        ]\n</code></pre>"},{"location":"reference/models/Artist/","title":"Artist","text":""},{"location":"reference/models/Artist/#knuckles.models._artist.Artist","title":"<code>Artist(subsonic, id, name=None, coverArt=None, albumCount=None, artistImageUrl=None, starred=None, userRating=None, averageRating=None, album=None, musicBrainzId=None, sortName=None, roles=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info of an artist.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the artist.</p> <code>name</code> <code>str | None</code> <p>The name of the artist.</p> <code>cover_art</code> <code>CoverArt | None</code> <p>The cover art associated with the artist.</p> <code>artist_image_url</code> <code>str |\u00a0None</code> <p>The URL of the image of the artist.</p> <code>album_count</code> <code>int |\u00a0None</code> <p>The number of albums created by the artist.</p> <code>starred</code> <code>datetime | None</code> <p>The timestamp when the artist was starred if it is.</p> <code>user_rating</code> <code>int | None</code> <p>The rating from 0 to 5 (inclusive) that the used has given to the artist if it is rated.</p> <code>average_rating</code> <code>float | None</code> <p>The average rating given by all the users.</p> <code>albums</code> <code>list[Album] | None</code> <p>A list that holds all the info about all the albums created by the artist.</p> <code>info</code> <code>ArtistInfo | None</code> <p>All the extra info about the artist.</p> <code>music_brainz_id</code> <code>str | None</code> <p>The ID of the MusicBrainz database entry of the artist.</p> <code>sort_name</code> <code>str\u00a0| None</code> <p>The sort name of the artist.</p> <code>roles</code> <code>list[str] | None</code> <p>List with all the roles the artist has been in.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_artist.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    name: str | None = None,\n    coverArt: str | None = None,\n    albumCount: int | None = None,\n    artistImageUrl: str | None = None,\n    starred: str | None = None,\n    userRating: int | None = None,\n    averageRating: float | None = None,\n    album: list[dict[str, Any]] | None = None,\n    musicBrainzId: str | None = None,\n    sortName: str | None = None,\n    roles: list[str] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.artist_image_url = artistImageUrl\n    self.album_count = albumCount\n    self.starred = parser.parse(starred) if starred else None\n    self.user_rating = userRating\n    self.average_rating = averageRating\n    self.albums = (\n        [\n            album_model_module.Album(self._subsonic, **album_data)\n            for album_data in album\n        ]\n        if album\n        else None\n    )\n    self.info: ArtistInfo | None = None\n    self.music_brainz_id = musicBrainzId\n    self.sort_name = sortName\n    self.roles = roles\n</code></pre>"},{"location":"reference/models/Artist/#knuckles.models._artist.Artist.generate","title":"<code>generate()</code>","text":"<p>Return a new artist info with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., foo = foo.generate().</p> <p>Returns:</p> Type Description <code>Artist</code> <p>A new object with the updated model.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_artist.py</code> <pre><code>def generate(self) -&gt; \"Artist\":\n    \"\"\"Return a new artist info with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object itself\n    with immutability, e.g., foo = foo.generate().\n\n    Returns:\n        A new object with the updated model.\n    \"\"\"\n\n    new_artist = self._subsonic.browsing.get_artist(self.id)\n    new_artist.get_artist_info()\n\n    return new_artist\n</code></pre>"},{"location":"reference/models/Artist/#knuckles.models._artist.Artist.get_artist_info","title":"<code>get_artist_info()</code>","text":"<p>Get all the extra info about the artist, it's set to the <code>info</code> attribute of the object.</p> <p>Returns:</p> Type Description <code>ArtistInfo</code> <p>The extra info returned by the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_artist.py</code> <pre><code>def get_artist_info(self) -&gt; ArtistInfo:\n    \"\"\"Get all the extra info about the artist, it's\n    set to the `info` attribute of the object.\n\n    Returns:\n        The extra info returned by the server.\n    \"\"\"\n\n    self.info = self._subsonic.browsing.get_artist_info(self.id)\n\n    return self.info\n</code></pre>"},{"location":"reference/models/Artist/#knuckles.models._artist.ArtistInfo","title":"<code>ArtistInfo(subsonic, artist_id, biography, musicBrainzId, lastFmUrl, smallImageUrl, mediumImageUrl, largeImageUrl, similarArtist=None, **kwargs)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the extra info of an artist.</p> <p>Attributes:</p> Name Type Description <code>artist_id</code> <code>str</code> <p>The ID of the artist.</p> <code>biography</code> <code>str</code> <p>The biography of an artist.</p> <code>music_brainz_id</code> <code>str | None</code> <p>The ID of the MusicBrainz database entry of the artist.</p> <code>last_fm_url</code> <code>str | None</code> <p>The last.fm URL of the artist.</p> <code>small_image_url</code> <code>str | None</code> <p>The URL of the small sized image of the artist.</p> <code>medium_image_url</code> <code>str | None</code> <p>The URL of the medium sized image of the artist.</p> <code>large_image_url</code> <code>str | None</code> <p>The URL of the large sized image of the artist.</p> <code>similar_artists</code> <code>list[Artist] | None</code> <p>A list that contains the all the info about similar artists.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_artist.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    artist_id: str,\n    biography: str,\n    musicBrainzId: str | None,\n    lastFmUrl: str | None,\n    smallImageUrl: str | None,\n    mediumImageUrl: str | None,\n    largeImageUrl: str | None,\n    similarArtist: list[dict[str, Any]] | None = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.artist_id = artist_id\n    self.biography = biography\n    self.music_brainz_id = musicBrainzId\n    self.last_fm_url = lastFmUrl\n    self.small_image_url = smallImageUrl\n    self.medium_image_url = mediumImageUrl\n    self.large_image_url = largeImageUrl\n    self.similar_artists = (\n        [Artist(self._subsonic, **artist) for artist in similarArtist]\n        if similarArtist\n        else None\n    )\n</code></pre>"},{"location":"reference/models/Artist/#knuckles.models._artist.ArtistInfo.generate","title":"<code>generate()</code>","text":"<p>Return a new artist info with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., foo = foo.generate().</p> <p>Returns:</p> Type Description <code>ArtistInfo</code> <p>A new object with the updated model.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_artist.py</code> <pre><code>def generate(self) -&gt; \"ArtistInfo\":\n    \"\"\"Return a new artist info with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object itself\n    with immutability, e.g., foo = foo.generate().\n\n    Returns:\n        A new object with the updated model.\n    \"\"\"\n\n    return self._subsonic.browsing.get_artist_info(self.artist_id)\n</code></pre>"},{"location":"reference/models/Bookmark/","title":"Bookmark","text":""},{"location":"reference/models/Bookmark/#knuckles.models._bookmark.Bookmark","title":"<code>Bookmark(subsonic, entry, position, username=None, created=None, changed=None, comment=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a bookmark.</p> <p>Attributes:</p> Name Type Description <code>song</code> <code>Song</code> <p>All the info about the bookmarked song.</p> <code>position</code> <code>int</code> <p>The position in seconds of the playback of the song when it was bookmarked.</p> <code>user</code> <code>User | None</code> <p>All the info about the user that created the bookmark.</p> <code>comment</code> <code>str | None</code> <p>A comment attached to the bookmark.</p> <code>created</code> <code>datetime | None</code> <p>The timestamp when the bookmark was created.</p> <code>changed</code> <code>datetime | None</code> <p>The timestamp when the bookmark was updated.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_bookmark.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    entry: dict[str, Any],\n    position: int,\n    username: str | None = None,\n    created: str | None = None,\n    changed: str | None = None,\n    comment: str | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.song = Song(self._subsonic, **entry)\n    self.position = position\n    self.user = (\n        User(subsonic=self._subsonic, username=username) if username else None\n    )\n    self.comment = comment\n    self.created = parser.parse(created) if created else None\n    self.changed = parser.parse(changed) if changed else None\n</code></pre>"},{"location":"reference/models/Bookmark/#knuckles.models._bookmark.Bookmark.create","title":"<code>create()</code>","text":"<p>Create a new bookmark for the authenticated user with the same data of the object where this method is called.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_bookmark.py</code> <pre><code>def create(self) -&gt; Self:\n    \"\"\"Create a new bookmark for the authenticated user\n    with the same data of the object where this method is\n    called.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.bookmarks.create_bookmark(\n        self.song.id, self.position, self.comment\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Bookmark/#knuckles.models._bookmark.Bookmark.delete","title":"<code>delete()</code>","text":"<p>Delete the bookmark entry from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_bookmark.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the bookmark entry from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.bookmarks.delete_bookmark(self.song.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Bookmark/#knuckles.models._bookmark.Bookmark.generate","title":"<code>generate()</code>","text":"<p>Return a new album object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Bookmark</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_bookmark.py</code> <pre><code>def generate(self) -&gt; \"Bookmark\":\n    \"\"\"Return a new album object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    get_bookmark = self._subsonic.bookmarks.get_bookmark(self.song.id)\n\n    if get_bookmark is None:\n        raise ResourceNotFound()\n\n    return get_bookmark\n</code></pre>"},{"location":"reference/models/Bookmark/#knuckles.models._bookmark.Bookmark.update","title":"<code>update()</code>","text":"<p>Update the info about the bookmark of this song using the current data of the object.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_bookmark.py</code> <pre><code>def update(self) -&gt; Self:\n    \"\"\"Update the info about the bookmark of this song using the\n    current data of the object.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.bookmarks.update_bookmark(\n        self.song.id, self.position, self.comment\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Chat%20Message/","title":"Chat Message","text":""},{"location":"reference/models/Chat%20Message/#knuckles.models._chat_message.ChatMessage","title":"<code>ChatMessage(subsonic, username, time, message)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a chat message.</p> <p>Attributes:</p> Name Type Description <code>user</code> <code>User</code> <p>The user author of the chat message.</p> <code>message</code> <p>The message send by the user.</p> <code>time</code> <code>datetime</code> <p>The timestamp when the chat message was send.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_chat_message.py</code> <pre><code>def __init__(\n    self, subsonic: \"Subsonic\", username: str, time: int, message: str\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.user = User(self._subsonic, username)\n    self.message = message\n\n    # Divide by 1000 as the Subsonic API return in milliseconds instead of seconds\n    self.time: datetime = datetime.fromtimestamp(time / 1000)\n</code></pre>"},{"location":"reference/models/Contributor/","title":"Contributor","text":""},{"location":"reference/models/Contributor/#knuckles.models._contributor.Contributor","title":"<code>Contributor(subsonic, role, artist, subRole=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a contributor.</p> <p>Attributes:</p> Name Type Description <code>role</code> <code>str</code> <p>The role of the contributor.</p> <code>artist</code> <code>Artist</code> <p>All the artist info associated with the contributor.</p> <code>subrole</code> <code>str | None</code> <p>The subrole of the contributor.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_contributor.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    role: str,\n    artist: Artist,\n    subRole: str | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.role = role\n    self.artist = artist\n    self.subrole = subRole\n</code></pre>"},{"location":"reference/models/Cover%20Art/","title":"Cover Art","text":""},{"location":"reference/models/Cover%20Art/#knuckles.models._cover_art.CoverArt","title":"<code>CoverArt(subsonic, id)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info of a cover art.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the cover art.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_cover_art.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", id: str) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id: str = id\n</code></pre>"},{"location":"reference/models/Genre/","title":"Genre","text":""},{"location":"reference/models/Genre/#knuckles.models._genre.Genre","title":"<code>Genre(subsonic, value, songCount=None, albumCount=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a genre.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The name of the genre.</p> <code>song_count</code> <code>int | None</code> <p>Number of songs tagged with the genre.</p> <code>album_count</code> <code>int | None</code> <p>Number of albums tagged with the genre.</p> <p>:param subsonic: The subsonic object to make all the internal requests with it. :type subsonic: Subsonic :param value: The name of the genre. :type value: str :param songCount: The number of songs with this genre, defaults to None. :type songCount: int | None, optional :param albumCount: The number of albums with this genre, defaults to None. :type albumCount: int | None, optional</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_genre.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    value: str,\n    songCount: int | None = None,\n    albumCount: int | None = None,\n) -&gt; None:\n    \"\"\"Representation of all the data related to a genre in Subsonic.\n\n    :param subsonic: The subsonic object to make all the internal requests with it.\n    :type subsonic: Subsonic\n    :param value: The name of the genre.\n    :type value: str\n    :param songCount: The number of songs with this genre, defaults to None.\n    :type songCount: int | None, optional\n    :param albumCount: The number of albums with this genre, defaults to None.\n    :type albumCount: int | None, optional\n    \"\"\"\n\n    super().__init__(subsonic)\n\n    self.value = value\n    self.song_count = songCount\n    self.album_count = albumCount\n</code></pre>"},{"location":"reference/models/Genre/#knuckles.models._genre.Genre.generate","title":"<code>generate()</code>","text":"<p>Return a new genre with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., foo = foo.generate().</p> <p>:return: A new genre object with all the data updated. :rtype: Genre</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_genre.py</code> <pre><code>def generate(self) -&gt; \"Genre\":\n    \"\"\"Return a new genre with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object itself\n    with immutability, e.g., foo = foo.generate().\n\n    :return: A new genre object with all the data updated.\n    :rtype: Genre\n    \"\"\"\n    get_genre = self._subsonic.browsing.get_genre(self.value)\n\n    if get_genre is None:\n        raise ResourceNotFound(\n            \"Unable to generate genre as it does not exist in the server\"\n        )\n\n    return get_genre\n</code></pre>"},{"location":"reference/models/Genre/#knuckles.models._genre.ItemGenre","title":"<code>ItemGenre(subsonic, name)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a item genre.</p> <p>Attributes:</p> Name Type Description <code>name</code> <p>The name of the genre.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_genre.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", name: str) -&gt; None:\n    super().__init__(subsonic)\n\n    self.name = name\n</code></pre>"},{"location":"reference/models/Internet%20Radio%20Station/","title":"Internet Radio Station","text":""},{"location":"reference/models/Internet%20Radio%20Station/#knuckles.models._internet_radio_station.InternetRadioStation","title":"<code>InternetRadioStation(subsonic, id, name, streamUrl, homepageUrl)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a Internet radio station.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the Internet radio station.</p> <code>name</code> <code>str</code> <p>Then name of the Internet radio station.</p> <code>stream_url</code> <code>str</code> <p>The URL of the stream of the Internet radio station.</p> <code>homepage_url</code> <code>str</code> <p>The URl of the hompage of the Internet radio station.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_internet_radio_station.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    name: str,\n    streamUrl: str,\n    homepageUrl: str,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n    self.stream_url = streamUrl\n    self.homepage_url = homepageUrl\n</code></pre>"},{"location":"reference/models/Internet%20Radio%20Station/#knuckles.models._internet_radio_station.InternetRadioStation.create","title":"<code>create()</code>","text":"<p>Create a new Internet radio station for the authenticated user with the same data of the object where this method is called.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_internet_radio_station.py</code> <pre><code>def create(self) -&gt; Self:\n    \"\"\"Create a new Internet radio station for the authenticated user\n    with the same data of the object where this method is\n    called.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.internet_radio.create_internet_radio_station(\n        self.stream_url, self.name, self.homepage_url\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Internet%20Radio%20Station/#knuckles.models._internet_radio_station.InternetRadioStation.delete","title":"<code>delete()</code>","text":"<p>Delete the Internet radio station entry from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_internet_radio_station.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the Internet radio station entry from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.internet_radio.delete_internet_radio_station(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Internet%20Radio%20Station/#knuckles.models._internet_radio_station.InternetRadioStation.generate","title":"<code>generate()</code>","text":"<p>Return a new album object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>InternetRadioStation | None</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_internet_radio_station.py</code> <pre><code>def generate(self) -&gt; \"InternetRadioStation | None\":\n    \"\"\"Return a new album object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    get_station = self._subsonic.internet_radio.get_internet_radio_station(self.id)\n\n    if get_station is None:\n        raise ResourceNotFound(\n            (\n                \"Unable to generate internet radio station\"\n                + \"as it does not exist in the server\"\n            )\n        )\n\n    return get_station\n</code></pre>"},{"location":"reference/models/Internet%20Radio%20Station/#knuckles.models._internet_radio_station.InternetRadioStation.update","title":"<code>update()</code>","text":"<p>Update the info about the Internet radio station using the current data of the object.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_internet_radio_station.py</code> <pre><code>def update(self) -&gt; Self:\n    \"\"\"Update the info about the Internet radio station using the\n    current data of the object.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.internet_radio.update_internet_radio_station(\n        self.id, self.stream_url, self.name, self.homepage_url\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/","title":"Jukebox","text":""},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox","title":"<code>Jukebox(subsonic, currentIndex, playing, gain, position, entry=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a jukebox.</p> <p>Attributes:</p> Name Type Description <code>current_index</code> <code>int</code> <p>The index in the playlist of the current playing song in the jukebox.</p> <code>playing</code> <code>bool</code> <p>If the jukebox is playing a song or not.</p> <code>gain</code> <code>float</code> <p>The gain of the playback of the jukebox.</p> <code>position</code> <code>int</code> <p>How many seconds the song has been already player.</p> <code>playlist</code> <code>list[Song] | None</code> <p>A list that holds all the info about all the songs that are in the playlist of the jukebox.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    currentIndex: int,\n    playing: bool,\n    gain: float,\n    position: int,\n    entry: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.current_index: int = currentIndex\n    self.playing: bool = playing\n    self.gain: float = gain\n    self.position: int = position\n\n    self.playlist: list[Song] | None = None\n    if entry is None:\n        return\n\n    self.playlist = []\n\n    for song in entry:\n        self.playlist.append(Song(subsonic=self._subsonic, **song))\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.add","title":"<code>add(songs_ids)</code>","text":"<p>Add songs to the playlist of the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>songs_ids</code> <code>list[str]</code> <p>The IDs of the songs to add.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def add(self, songs_ids: list[str]) -&gt; Self:\n    \"\"\"Add songs to the playlist of the jukebox.\n\n    Args:\n        songs_ids: The IDs of the songs to add.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.add(songs_ids)\n\n    songs_to_add = [\n        Song(subsonic=self._subsonic, id=song_id) for song_id in songs_ids\n    ]\n    if self.playlist is not None:\n        self.playlist += songs_to_add\n        return self\n\n    # If the playlist is None then the real value of it is unknown,\n    # so a call the API is necessary to get a correct representation\n    # of the jukebox\n    self.playlist = self.generate().playlist\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.clear","title":"<code>clear()</code>","text":"<p>Calls the \"jukeboxControl\" endpoint of the API with the action \"clear\".</p> <p>:return: The object itself to allow method chaining. :rtype: Self</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def clear(self) -&gt; Self:\n    \"\"\"Calls the \"jukeboxControl\" endpoint of the API with the action \"clear\".\n\n    :return: The object itself to allow method chaining.\n    :rtype: Self\n    \"\"\"\n\n    self._subsonic.jukebox.clear()\n    self.playlist = []\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.generate","title":"<code>generate()</code>","text":"<p>Return a new jukebox object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Jukebox</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def generate(self) -&gt; \"Jukebox\":\n    \"\"\"Return a new jukebox object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    return self._subsonic.jukebox.get()\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.remove","title":"<code>remove(index)</code>","text":"<p>Remove a song from the playlist of the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the song in the playlist to remove.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def remove(self, index: int) -&gt; Self:\n    \"\"\"Remove a song from the playlist of the jukebox.\n\n    Args:\n        index: The index of the song in the playlist to remove.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.remove(index)\n\n    if self.playlist is not None:\n        del self.playlist[index]\n        return self\n\n    # If the playlist is None the real value of it is unknown,\n    # so a call the API is necessary to get a correct representation of the jukebox\n    self.playlist = self.generate().playlist\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.set","title":"<code>set(songs_ids)</code>","text":"<p>Set the songs of the playlist of the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>songs_ids</code> <code>list[str]</code> <p>The IDs of the songs to be set the playlist to.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def set(self, songs_ids: list[str]) -&gt; Self:\n    \"\"\"Set the songs of the playlist of the jukebox.\n\n    Args:\n        songs_ids: The IDs of the songs to be set the playlist to.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.set(songs_ids)\n\n    self.playlist = [\n        Song(subsonic=self._subsonic, id=song_id) for song_id in songs_ids\n    ]\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.set_gain","title":"<code>set_gain(gain)</code>","text":"<p>Set the gain of the jukebox.</p> <p>Parameters:</p> Name Type Description Default <code>gain</code> <code>float</code> <p>The new gain of the jukebox.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def set_gain(self, gain: float) -&gt; Self:\n    \"\"\"Set the gain of the jukebox.\n\n    Args:\n        gain: The new gain of the jukebox.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.set_gain(gain)\n    self.gain = gain\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.shuffle","title":"<code>shuffle()</code>","text":"<p>Shuffle the playlist of the jukebox.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def shuffle(self) -&gt; Self:\n    \"\"\"Shuffle the playlist of the jukebox.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.shuffle()\n\n    # The shuffle is server side so a call to the API is necessary\n    # to get the new order of the playlist\n    self.playlist = self._subsonic.jukebox.get().playlist\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.skip","title":"<code>skip(index, offset=0)</code>","text":"<p>Skips the current playing song of the jukebox to another one.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the song to skip to.</p> required <code>offset</code> <code>float</code> <p>An offset in seconds where the playback of the song should start at.</p> <code>0</code> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def skip(self, index: int, offset: float = 0) -&gt; Self:\n    \"\"\"Skips the current playing song of the jukebox to another one.\n\n    Args:\n        index: The index of the song to skip to.\n        offset: An offset in seconds where the playback of the song\n            should start at.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.skip(index, offset)\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.start","title":"<code>start()</code>","text":"<p>Start the playback of the next song in the playlist.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def start(self) -&gt; Self:\n    \"\"\"Start the playback of the next song in the playlist.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.jukebox.start()\n\n    return self\n</code></pre>"},{"location":"reference/models/Jukebox/#knuckles.models._jukebox.Jukebox.stop","title":"<code>stop()</code>","text":"<p>Stop the playback of the jukebox.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_jukebox.py</code> <pre><code>def stop(self) -&gt; Self:\n    \"\"\"Stop the playback of the jukebox.\n\n    Returns:\n        The object itself.\n    \"\"\"\n    self._subsonic.jukebox.stop()\n\n    return self\n</code></pre>"},{"location":"reference/models/Lyrics/","title":"Lyrics","text":""},{"location":"reference/models/Lyrics/#knuckles.models._lyrics.Lyrics","title":"<code>Lyrics(subsonic, artist, title, value)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about the lyrics of a song.</p> <p>Attributes:</p> Name Type Description <code>artist_name</code> <code>str</code> <p>The name of the artist of the song.</p> <code>song_title</code> <code>str</code> <p>The title of the song.</p> <code>lyrics</code> <code>str</code> <p>The lyrics text of the song.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_lyrics.py</code> <pre><code>def __init__(\n    self, subsonic: \"Subsonic\", artist: str, title: str, value: str\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.artist_name = artist\n    self.song_title = title\n    self.lyrics = value\n</code></pre>"},{"location":"reference/models/Model/","title":"Model","text":""},{"location":"reference/models/Model/#knuckles.models._model.Model","title":"<code>Model(subsonic)</code>","text":"<p>Generic parent class for all the models. Have an internal attribute to hold a Subsonic object to access the OpenSubsonic REST API.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_model.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\") -&gt; None:\n    self._subsonic = subsonic\n</code></pre>"},{"location":"reference/models/Music%20Directory/","title":"Music Directory","text":""},{"location":"reference/models/Music%20Directory/#knuckles.models._music_directory.MusicDirectory","title":"<code>MusicDirectory(subsonic, id, name, parent=None, starred=None, userRating=None, averageRating=None, playCount=None, child=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a music directory.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the music directory.</p> <code>name</code> <code>str</code> <code>parent</code> <code>str | None</code> <code>starred</code> <code>datetime | None</code> <p>The timestamp when the music directory was starred by the authenticated user if it was.</p> <code>user_rating</code> <code>int</code> <p>The rating given by the authenticated user if they rated it.</p> <code>average_rating</code> <code>float | None</code> <p>The average rating given to the music directory.</p> <code>play_count</code> <code>int | None</code> <p>The number of times songs have been played that are in the music directory.</p> <code>songs</code> <code>list[Song] | None</code> <p>List that holds all the info about all the songs that are part of the music directory.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_music_directory.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    name: str,\n    parent: str | None = None,\n    starred: str | None = None,\n    userRating: int | None = None,\n    averageRating: float | None = None,\n    playCount: int | None = None,\n    child: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n    self.parent = parent\n    self.starred = parser.parse(starred) if starred else None\n    self.user_rating = userRating\n    self.average_rating = averageRating\n    self.play_count = playCount\n    self.songs = (\n        [Song(subsonic=self._subsonic, **song) for song in child] if child else None\n    )\n</code></pre>"},{"location":"reference/models/Music%20Folder/","title":"Music Folder","text":""},{"location":"reference/models/Music%20Folder/#knuckles.models._music_folder.MusicFolder","title":"<code>MusicFolder(subsonic, id, name=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a music folder</p> <p>Attributes:</p> Name Type Description <code>id</code> <p>The ID of the music folder.</p> <code>name</code> <p>The name of the music folder.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_music_folder.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", id: str, name: str | None = None) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n</code></pre>"},{"location":"reference/models/Music%20Folder/#knuckles.models._music_folder.MusicFolder.generate","title":"<code>generate()</code>","text":"<p>Return a new music folder object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>MusicFolder</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_music_folder.py</code> <pre><code>def generate(self) -&gt; \"MusicFolder\":\n    \"\"\"Return a new music folder object with all the data updated from the\n    API, using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    music_folders = self._subsonic.browsing.get_music_folders()\n\n    # Get the first element with the same ID\n    music_folder = next(\n        music_folder for music_folder in music_folders if music_folder.id == self.id\n    )\n\n    return music_folder\n</code></pre>"},{"location":"reference/models/Now%20Playing%20Entry/","title":"Now Playing Entry","text":""},{"location":"reference/models/Now%20Playing%20Entry/#knuckles.models._now_playing_entry.NowPlayingEntry","title":"<code>NowPlayingEntry(subsonic, username, minutesAgo=None, playerId=None, playerName=None, **song_data)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a now playing entry.</p> <p>Attributes:</p> Name Type Description <code>user</code> <p>The user that is currently playing a song.</p> <code>song</code> <code>Song</code> <p>All the info about the song that is now playing.</p> <code>minutes_ago</code> <code>int | None</code> <p>How many minutes ago the songs started its playback.</p> <code>player_id</code> <code>int | None</code> <p>The ID of the played where the song is playing.</p> <code>player_name</code> <code>song | None</code> <p>The name of the player where the song is playing.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_now_playing_entry.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    username: str,\n    minutesAgo: int | None = None,\n    playerId: int | None = None,\n    playerName: str | None = None,\n    **song_data: Any,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.user = User(self._subsonic, username)\n    self.minutes_ago = minutesAgo\n    self.player_id = playerId\n    self.player_name = playerName\n    self.song = Song(subsonic=self._subsonic, **song_data)\n</code></pre>"},{"location":"reference/models/Play%20Queue/","title":"Play Queue","text":""},{"location":"reference/models/Play%20Queue/#knuckles.models._play_queue.PlayQueue","title":"<code>PlayQueue(subsonic, entry, current=None, position=None, username=None, changed=None, changedBy=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds al the info about a play queue.</p> <p>Attributes:</p> Name Type Description <code>songs</code> <code>list[Song]</code> <p>All the info about all the songs in the play queue.</p> <code>current</code> <code>Song |\u00a0None</code> <p>The current playing song in the play queue.</p> <code>position</code> <code>int | None</code> <p>The index of the current playing song in the play queue.</p> <code>user</code> <code>User | None</code> <p>The user owner of the play queue.</p> <code>changed</code> <code>timedate | None</code> <p>The timestamp when the play queue received any change.</p> <code>changed_by</code> <code>str |\u00a0None</code> <p>The name of the client that made the last modification to the play queue.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_play_queue.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    entry: list[dict[str, Any]],\n    current: str | None = None,\n    position: int | None = None,\n    username: str | None = None,\n    changed: str | None = None,\n    changedBy: str | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.current = Song(self._subsonic, current) if current else None\n    self.position = position\n    self.user = User(self._subsonic, username) if username else None\n    self.changed = parser.parse(changed) if changed else None\n    self.changed_by = changedBy\n    self.songs = [Song(self._subsonic, **song) for song in entry] if entry else None\n</code></pre>"},{"location":"reference/models/Play%20Queue/#knuckles.models._play_queue.PlayQueue.generate","title":"<code>generate()</code>","text":"<p>Return a new play queue object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>PlayQueue</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_play_queue.py</code> <pre><code>def generate(self) -&gt; \"PlayQueue\":\n    \"\"\"Return a new play queue object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    get_play_queue = self._subsonic.bookmarks.get_play_queue()\n\n    return get_play_queue\n</code></pre>"},{"location":"reference/models/Play%20Queue/#knuckles.models._play_queue.PlayQueue.save","title":"<code>save()</code>","text":"<p>Calls the \"savePlayQueue\" endpoint of the API.</p> <p>Saves the play queue using the parameters in the object.</p> <p>:return: description :rtype: Self</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_play_queue.py</code> <pre><code>def save(self) -&gt; Self:\n    \"\"\"Calls the \"savePlayQueue\" endpoint of the API.\n\n    Saves the play queue using the parameters in the object.\n\n    :return: _description_\n    :rtype: Self\n    \"\"\"\n\n    song_ids: list[str] = [song.id for song in self.songs] if self.songs else []\n\n    self._subsonic.bookmarks.save_play_queue(\n        song_ids, self.current.id if self.current else None, self.position\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Playlist/","title":"Playlist","text":""},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist","title":"<code>Playlist(subsonic, id, name=None, songCount=None, duration=None, created=None, changed=None, comment=None, owner=None, public=None, coverArt=None, allowedUser=None, entry=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a playlist.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the playlist.</p> <code>name</code> <code>str\u00a0| None</code> <p>The name of the playlist.</p> <code>song_count</code> <code>int |\u00a0None</code> <p>The number of songs in the playlist.</p> <code>duration</code> <code>int | None</code> <p>The total durations of all the songs in the playlist.</p> <code>created</code> <code>datetime | None</code> <p>The timestamp when the playlist was created.</p> <code>changed</code> <code>datetime | None</code> <p>The timestamp when the playlist was last edited.</p> <code>comment</code> <code>str\u00a0|\u00a0None</code> <p>A comment attach with the playlist.</p> <code>owner</code> <code>User | None</code> <p>All the info related with the user creator of the playlist.</p> <code>public</code> <code>bool |\u00a0None</code> <p>If the playlist is public or not.</p> <code>cover_art</code> <code>CoverArt |\u00a0None</code> <p>All the info related with the cover art of the playlist.</p> <code>allowed_users</code> <code>list[User] | None</code> <p>List that holds all the info related with all the users allowed to see the playlist.</p> <code>songs</code> <code>list[Song] | None</code> <p>List that holds all the info about all the songs in the playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    name: str | None = None,\n    songCount: int | None = None,\n    duration: int | None = None,\n    created: str | None = None,\n    changed: str | None = None,\n    comment: str | None = None,\n    owner: str | None = None,\n    public: bool | None = None,\n    coverArt: str | None = None,\n    allowedUser: list[str] | None = None,\n    entry: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n    self.song_count = songCount\n    self.duration = duration\n    self.created = parser.parse(created) if created else None\n    self.changed = parser.parse(changed) if changed else None\n    self.comment = comment\n    self.owner = User(self._subsonic, owner) if owner else None\n    self.public = public\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.allowed_users = (\n        [User(self._subsonic, username) for username in allowedUser]\n        if allowedUser\n        else None\n    )\n    self.songs = [Song(self._subsonic, **song) for song in entry] if entry else None\n</code></pre>"},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist.add_songs","title":"<code>add_songs(song_ids)</code>","text":"<p>Add songs to the playlist.</p> <p>Parameters:</p> Name Type Description Default <code>song_ids</code> <code>list[str]</code> <p>The ID of songs to add.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def add_songs(self, song_ids: list[str]) -&gt; Self:\n    \"\"\"Add songs to the playlist.\n\n    Args:\n        song_ids: The ID of songs to add.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.playlists.update_playlist(self.id, song_ids_to_add=song_ids)\n\n    if not self.songs:\n        self.songs = []\n\n    for id_ in song_ids:\n        self.songs.append(Song(self._subsonic, id_))\n\n    if not self.song_count:\n        self.song_count = 0\n\n    self.song_count += len(song_ids)\n\n    return self\n</code></pre>"},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist.create","title":"<code>create()</code>","text":"<p>Create a playlist with the same info of the object.</p> <p>Returns:</p> Type Description <code>Playlist</code> <p>The new created playlist.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def create(self) -&gt; \"Playlist\":\n    \"\"\"Create a playlist with the same info of the object.\n\n    Returns:\n        The new created playlist.\n    \"\"\"\n\n    # Create a list of Song IDs if songs is not None\n    songs_ids = [song.id for song in self.songs] if self.songs else None\n\n    new_playlist = self._subsonic.playlists.create_playlist(\n        # Ignore the None type error as the server\n        # should return an Error Code 10 in response\n        self.name,  # type: ignore[arg-type]\n        self.comment,\n        self.public,\n        songs_ids,\n    )\n\n    return new_playlist\n</code></pre>"},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist.delete","title":"<code>delete()</code>","text":"<p>Delete the playlist from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the playlist from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.playlists.delete_playlist(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist.generate","title":"<code>generate()</code>","text":"<p>Return a new playlist object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Playlist</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def generate(self) -&gt; \"Playlist\":\n    \"\"\"Return a new playlist object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    return self._subsonic.playlists.get_playlist(self.id)\n</code></pre>"},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist.remove_songs","title":"<code>remove_songs(songs_indexes)</code>","text":"<p>Remove songs from the playlist.</p> <p>Parameters:</p> Name Type Description Default <code>songs_indexes</code> <code>list[int]</code> <p>The indexes of the songs to remove.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def remove_songs(self, songs_indexes: list[int]) -&gt; Self:\n    \"\"\"Remove songs from the playlist.\n\n    Args:\n        songs_indexes: The indexes of the songs to remove.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.playlists.update_playlist(\n        self.id, song_indexes_to_remove=songs_indexes\n    )\n\n    if not self.songs:\n        self.songs = []\n\n    for index in songs_indexes:\n        del self.songs[index]\n\n    if not self.song_count:\n        self.song_count = 0\n\n    self.song_count -= len(songs_indexes)\n\n    return self\n</code></pre>"},{"location":"reference/models/Playlist/#knuckles.models._playlist.Playlist.update","title":"<code>update()</code>","text":"<p>Updates changed info between the model and the server.</p> Warning <p>It doesn't change the list of songs in the playlist. For do it use the <code>add_songs</code> and <code>remove_songs</code> methods.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_playlist.py</code> <pre><code>def update(self) -&gt; Self:\n    \"\"\"Updates changed info between the model and the server.\n\n    Warning:\n        It doesn't change the list of songs in the playlist. For do\n        it use the `add_songs` and `remove_songs` methods.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.playlists.update_playlist(\n        self.id, comment=self.comment, public=self.public\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Podcast/","title":"Podcast","text":""},{"location":"reference/models/Podcast/#knuckles.models._podcast.Channel","title":"<code>Channel(subsonic, id, url=None, title=None, description=None, coverArt=None, originalImageUrl=None, status=None, episode=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a channel.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the channel.</p> <code>url</code> <code>str | None</code> <p>The URL of the channel.</p> <code>title</code> <code>str | None</code> <p>The title of the channel.</p> <code>description</code> <code>str | None</code> <p>The description of the channel.</p> <code>cover_art</code> <code>CoverArt | None</code> <p>All the info related with the cover art of the channel.</p> <code>original_image_url</code> <code>str | None</code> <p>The URL of the original image of the channel.</p> <code>status</code> <code>str | None</code> <p>The status of the channel.</p> <code>episodes</code> <code>list[Episode] |\u00a0None</code> <p>List that holds all the info about all the episodes of the channel.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    url: str | None = None,\n    title: str | None = None,\n    description: str | None = None,\n    coverArt: str | None = None,\n    originalImageUrl: str | None = None,\n    status: str | None = None,\n    episode: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.url = url\n    self.title = title\n    self.description = description\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.original_image_url = originalImageUrl\n    self.status = status\n    self.episodes = (\n        [Episode(self._subsonic, **episode_data) for episode_data in episode]\n        if episode\n        else None\n    )\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Channel.create","title":"<code>create()</code>","text":"<p>Create a new podcast with the info of the current one.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def create(self) -&gt; Self:\n    \"\"\"Create a new podcast with the info of the current one.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    # Ignore the None type error as the server\n    # should return an Error Code 10 in response\n    self._subsonic.podcast.create_podcast_channel(\n        self.url  # type: ignore[arg-type]\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Channel.delete","title":"<code>delete()</code>","text":"<p>Delete the podcast from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the podcast from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.podcast.delete_podcast_channel(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Channel.generate","title":"<code>generate()</code>","text":"<p>Return a new channel object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Channel</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def generate(self) -&gt; \"Channel\":\n    \"\"\"Return a new channel object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    return self._subsonic.podcast.get_podcast_channel(self.id)\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Episode","title":"<code>Episode(subsonic, id, streamId=None, channelId=None, title=None, description=None, publishDate=None, status=None, parent=None, isDir=None, year=None, genre=None, coverArt=None, size=None, contentType=None, suffix=None, duration=None, bitRate=None, path=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a episode</p> <p>Attributes:</p> Name Type Description <code>id</code> <p>(str) The ID of the episode</p> <code>stream_id</code> <code>str | None</code> <p>The ID of the stream of the episode.</p> <code>channel</code> <code>Channel | None</code> <p>The channel where the episode is from.</p> <code>title</code> <code>str | None</code> <p>The title of the episode.</p> <code>description</code> <code>str | None</code> <p>The description of the episode.</p> <code>publish_date</code> <code>datetime | None</code> <p>The timestamp when the episode was publised.</p> <code>status</code> <code>str | None</code> <p>The status of the episode.</p> <code>parent</code> <code>str |\u00a0None</code> <p>The ID of the parent of the episode.</p> <code>is_dir</code> <code>bool |\u00a0None</code> <p>If the episode is a directory.</p> <code>year</code> <code>int | None</code> <p>The year when the episode was released.</p> <code>genre</code> <code>str | None</code> <p>The name of the genre of the episode.</p> <code>cover_art</code> <code>CoverArt |\u00a0None</code> <p>All the info related with the cover art of the episode.</p> <code>size</code> <code>int | None</code> <p>The size of the episode.</p> <code>content_type</code> <code>str | None</code> <p>The HTTP Content-Type of the file of the episode.</p> <code>suffix</code> <code>str | None</code> <p>The suffix of the filename of the file of the episode.</p> <code>duration</code> <code>int | None</code> <p>The duration in seconds of the episode.</p> <code>bit_rate</code> <code>int | None</code> <p>The bit rate of the episode.</p> <code>path</code> <code>str | None</code> <p>The path of the episode.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    streamId: str | None = None,\n    channelId: str | None = None,\n    title: str | None = None,\n    description: str | None = None,\n    publishDate: str | None = None,\n    status: str | None = None,\n    parent: str | None = None,\n    isDir: bool | None = None,\n    year: int | None = None,\n    genre: str | None = None,\n    coverArt: str | None = None,\n    size: int | None = None,\n    contentType: str | None = None,\n    suffix: str | None = None,\n    duration: int | None = None,\n    bitRate: int | None = None,\n    path: str | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.stream_id = streamId\n    self.channel = Channel(self._subsonic, channelId) if channelId else None\n    self.title = title\n    self.description = description\n    self.publish_date = parser.parse(publishDate) if publishDate else None\n    self.status = status\n    self.parent = parent\n    self.is_dir = isDir\n    self.year = year\n    self.genre = genre\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.size = size\n    self.content_type = contentType\n    self.suffix = suffix\n    self.duration = duration\n    self.bit_rate = bitRate\n    self.path = path\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Episode.delete","title":"<code>delete()</code>","text":"<p>Delete the episode from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the episode from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.podcast.delete_podcast_episode(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Episode.download","title":"<code>download()</code>","text":"<p>Request the server to download the episode.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def download(self) -&gt; Self:\n    \"\"\"Request the server to download the episode.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.podcast.download_podcast_episode(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Podcast/#knuckles.models._podcast.Episode.generate","title":"<code>generate()</code>","text":"<p>Return a new episode object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Episode</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_podcast.py</code> <pre><code>def generate(self) -&gt; \"Episode\":\n    \"\"\"Return a new episode object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    get_episode = self._subsonic.podcast.get_podcast_episode(self.id)\n\n    if get_episode is None:\n        raise ResourceNotFound(\n            \"Unable to generate episode as it does not exist in the server\"\n        )\n\n    return get_episode\n</code></pre>"},{"location":"reference/models/Replay%20Gain/","title":"Replay Gain","text":""},{"location":"reference/models/Replay%20Gain/#knuckles.models._replay_gain.ReplayGain","title":"<code>ReplayGain(subsonic, trackGain=None, albumGain=None, trackPeak=None, albumPeak=None, baseGain=None, fallbackGain=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about the gain of the playback of a media.</p> <p>Attributes:</p> Name Type Description <code>track_gain</code> <code>str\u00a0| None</code> <p>The track replay gain in dB.</p> <code>album_gain</code> <code>str\u00a0| None</code> <p>The album replay gain in dB.</p> <code>track_peak</code> <code>int | None</code> <p>The track peak value.</p> <code>album_peak</code> <code>int | None</code> <p>The album peak value.</p> <code>base_gain</code> <code>int | None</code> <p>The base replay gain in dB.</p> <code>fallback_gain</code> <code>int | None</code> <p>Fallback gain in dB used when the desired one is missing.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_replay_gain.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    trackGain: str | None = None,\n    albumGain: str | None = None,\n    trackPeak: str | None = None,\n    albumPeak: str | None = None,\n    baseGain: str | None = None,\n    fallbackGain: int | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.track_gain = trackGain\n    self.album_gain = albumGain\n    self.track_peak = trackPeak\n    self.album_peak = albumPeak\n    self.base_gain = baseGain\n    self.fallback_gain = fallbackGain\n</code></pre>"},{"location":"reference/models/Scan%20Status/","title":"Scan Status","text":""},{"location":"reference/models/Scan%20Status/#knuckles.models._scan_status.ScanStatus","title":"<code>ScanStatus(subsonic, scanning, count)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a scan status.</p> <p>Attributes:</p> Name Type Description <code>scanning</code> <code>bool</code> <p>If the server is scanning media or not.</p> <code>count</code> <code>int</code> <p>The number of media already scanned.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_scan_status.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", scanning: bool, count: int) -&gt; None:\n    super().__init__(subsonic)\n\n    self.scanning: bool = scanning\n    self.count: int = count\n</code></pre>"},{"location":"reference/models/Search%20Result/","title":"Search Result","text":""},{"location":"reference/models/Search%20Result/#knuckles.models._search_result.SearchResult","title":"<code>SearchResult(subsonic, songs=None, albums=None, artists=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a search result.</p> <p>Attributes:</p> Name Type Description <code>songs</code> <code>list[Song] | None</code> <p>List that holds all the info about all the songs returned in the search result.-</p> <code>albums</code> <code>list[Album] | None</code> <p>List that holds all the info about all the albums returned in the search result.</p> <code>artists</code> <code>list[Artist] | None</code> <p>List that holds all the info about all the artists returned in the search result.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_search_result.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    songs: list[Song] | None = None,\n    albums: list[Album] | None = None,\n    artists: list[Artist] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.songs = songs\n    self.albums = albums\n    self.artists = artists\n</code></pre>"},{"location":"reference/models/Share/","title":"Share","text":""},{"location":"reference/models/Share/#knuckles.models._share.Share","title":"<code>Share(subsonic, id, url=None, description=None, username=None, created=None, expires=None, lastVisited=None, visitCount=None, entry=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a share.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the share.</p> <code>url</code> <code>str | None</code> <p>The URL to access the shared media.</p> <code>description</code> <code>str | None</code> <p>The description of the share.</p> <code>user</code> <code>User | None</code> <p>All the info related with the user creator of the share.</p> <code>created</code> <code>datetime | None</code> <p>The timestamp when the share was created.</p> <code>expires</code> <code>datetime\u00a0| None</code> <p>The timestamp when the share will expire.</p> <code>last_visited</code> <code>datetime | None</code> <p>The timestamp when the share was last visited.</p> <code>visit_count</code> <code>int | None</code> <p>Number of times the share has been visited.</p> <code>songs</code> <code>list[Song] | None</code> <p>List that holds all the info about all the songs available to access with the share.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_share.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    url: str | None = None,\n    description: str | None = None,\n    username: str | None = None,\n    created: str | None = None,\n    expires: str | None = None,\n    lastVisited: str | None = None,\n    visitCount: int | None = None,\n    entry: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.url = url\n    self.description = description\n    self.user = User(self._subsonic, username) if username else None\n    self.created = parser.parse(created) if created else None\n    self.expires = parser.parse(expires) if expires else None\n    self.last_visited = parser.parse(lastVisited) if lastVisited else None\n    self.visit_count = visitCount\n    self.songs = [Song(self._subsonic, **song) for song in entry] if entry else None\n</code></pre>"},{"location":"reference/models/Share/#knuckles.models._share.Share.create","title":"<code>create()</code>","text":"<p>Create a new share with the same info of the current one.</p> <p>Raises:</p> Type Description <code>ShareInvalidSongList</code> <p>Raised if the song list contained in the share is empty.</p> <p>Returns:</p> Type Description <code>Share</code> <p>The new created share.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_share.py</code> <pre><code>def create(self) -&gt; \"Share\":\n    \"\"\"Create a new share with the same info of the current one.\n\n    Raises:\n        ShareInvalidSongList: Raised if the song list contained in\n            the share is empty.\n\n    Returns:\n        The new created share.\n    \"\"\"\n\n    if self.songs is None or self.songs == []:\n        raise ShareInvalidSongList(\n            (\n                \"A list with at least one song model object in the songs parameter\"\n                + \"is necessary to create a share\"\n            )\n        )\n\n    songs_ids = [song.id for song in self.songs]\n\n    new_share = self._subsonic.sharing.create_share(\n        songs_ids, self.description, self.expires\n    )\n\n    return new_share\n</code></pre>"},{"location":"reference/models/Share/#knuckles.models._share.Share.delete","title":"<code>delete()</code>","text":"<p>Delete the share from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_share.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the share from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.sharing.delete_share(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Share/#knuckles.models._share.Share.generate","title":"<code>generate()</code>","text":"<p>Return a new share object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Share | None</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_share.py</code> <pre><code>def generate(self) -&gt; \"Share | None\":\n    \"\"\"Return a new share object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    get_share = self._subsonic.sharing.get_share(self.id)\n\n    if get_share is None:\n        raise ResourceNotFound\n\n    return get_share\n</code></pre>"},{"location":"reference/models/Share/#knuckles.models._share.Share.update","title":"<code>update()</code>","text":"<p>Update the info of the share with the one in the model.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_share.py</code> <pre><code>def update(self) -&gt; Self:\n    \"\"\"Update the info of the share with the one in the model.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.sharing.update_share(self.id, self.description, self.expires)\n\n    return self\n</code></pre>"},{"location":"reference/models/Song/","title":"Song","text":""},{"location":"reference/models/Song/#knuckles.models._song.Song","title":"<code>Song(subsonic, id, title=None, parent=None, isDir=None, isVideo=None, album=None, artist=None, track=None, year=None, genre=None, coverArt=None, size=None, contentType=None, suffix=None, transcodedContentType=None, transcodedSuffix=None, duration=None, bitRate=None, path=None, userRating=None, averageRating=None, playCount=None, discNumber=None, created=None, starred=None, albumId=None, artistId=None, type=None, bookmarkPosition=None, originalWidth=None, originalHeight=None, played=None, bpm=None, comment=None, sortName=None, musicBrainzId=None, genres=None, artists=None, displayArtist=None, albumArtists=None, displayAlbumArtist=None, contributors=None, displayComposer=None, moods=None, replayGain=None, mediaType=None, **kwargs)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a song.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the song.</p> <code>title</code> <code>str | None</code> <p>The title of the song.</p> <code>parent</code> <code>str | None</code> <p>The ID of the parent of the song.</p> <code>track</code> <code>int | None</code> <p>The track</p> <code>year</code> <code>int | None</code> <p>The year when the song was released.</p> <code>genre</code> <code>Genre | None</code> <p>All the info related with the genre of the song.</p> <code>size</code> <code>int | None</code> <p>The size of the file of the song.</p> <code>content_type</code> <code>str | None</code> <p>The HTTP ContentType of the file of the song.</p> <code>suffix</code> <code>str | None</code> <p>The suffix of the filename of the file of the song.</p> <code>transcoded_content_type</code> <code>str\u00a0| None</code> <p>The HTTP ContentType of the transcoded file of the song.</p> <code>transcoded_suffix</code> <code>str\u00a0| None</code> <p>The suffix of the filename of the transcoded file of the song.</p> <code>duration</code> <code>int | None</code> <p>The duration in seconds of the song.</p> <code>bit_rate</code> <code>int | None</code> <p>The bit rate of the song.</p> <code>path</code> <code>str\u00a0| None</code> <p>The path of the song.</p> <code>user_rating</code> <code>int | None</code> <p>The rating given to the song by the user.</p> <code>average_rating</code> <code>float | None</code> <p>The average rating of all the user for the song.</p> <code>play_count</code> <code>int | None</code> <p>The number of the times the song has been played.</p> <code>disc_number</code> <code>int | None</code> <p>The disc number of the song.</p> <code>type</code> <code>str\u00a0|  None</code> <p>The type of media.</p> <code>bookmark_position</code> <code>int | None</code> <p>The position in seconds where the song is bookmarked for the authenticated user.</p> <code>album</code> <code>Album | None</code> <p>All the info related with the album of the song.</p> <code>artist</code> <code>Artist\u00a0| None</code> <p>All the info related with the main artist of the song.</p> <code>cover_art</code> <code>CoverArt | None</code> <p>All the info related with the cover art of the song.</p> <code>created</code> <code>datetime | None</code> <p>The timestamp when the song was created.</p> <code>starred</code> <code>datetime | None</code> <p>The timestamp when the song was starred by the authenticated user if they have.</p> <code>played</code> <code>datetime\u00a0| None</code> <p>The timestamp when the song was last played.</p> <code>bpm</code> <code>int | None</code> <p>The bpm of the song.</p> <code>comment</code> <code>str |\u00a0None</code> <p>The comment of the song.</p> <code>sort_name</code> <code>str\u00a0| None</code> <p>The sort name of the song.</p> <code>music_brainz_id</code> <code>str\u00a0| None</code> <p>The ID of the MusicBrainz entry of the song.</p> <code>genres</code> <code>list[ItemGenre |\u00a0None</code> <p>List that holds all the info about all the genres of the song.</p> <code>artists</code> <code>list[Artist] |\u00a0None</code> <p>List that holds all the info about all the artists that made the song.</p> <code>display_artist</code> <code>str | None</code> <p>The display name of the artist of the song.</p> <code>album_artists</code> <code>list[Artist] | None</code> <p>List that holds all the info about all the artists that made the album where the song is from.</p> <code>display_album_artist</code> <code>str |\u00a0None</code> <p>THe display name of the artist of the album of the song.</p> <code>contributors</code> <code>list[Contributor] | None</code> <p>List that holds all the info about all the contributors of the song.</p> <code>display_composer</code> <code>str\u00a0|\u00a0None</code> <p>The display name of the composer of the song.</p> <code>moods</code> <code>list[str] |\u00a0None</code> <p>List off all the moods of the song.</p> <code>replay_gain</code> <code>ReplayGain | None</code> <p>All the info about the replay gain of the song.</p> <code>media_type</code> <code>str | None</code> <p>The type of media of the song.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    title: str | None = None,\n    parent: str | None = None,\n    isDir: bool | None = None,\n    isVideo: bool | None = None,\n    album: str | None = None,\n    artist: str | None = None,\n    track: int | None = None,\n    year: int | None = None,\n    genre: str | None = None,\n    coverArt: str | None = None,\n    size: int | None = None,\n    contentType: str | None = None,\n    suffix: str | None = None,\n    transcodedContentType: str | None = None,\n    transcodedSuffix: str | None = None,\n    duration: int | None = None,\n    bitRate: int | None = None,\n    path: str | None = None,\n    userRating: int | None = None,\n    averageRating: float | None = None,\n    playCount: int | None = None,\n    discNumber: int | None = None,\n    created: str | None = None,\n    starred: str | None = None,\n    albumId: str | None = None,\n    artistId: str | None = None,\n    type: str | None = None,\n    bookmarkPosition: int | None = None,\n    originalWidth: None = None,\n    originalHeight: None = None,\n    played: str | None = None,\n    bpm: int | None = None,\n    comment: str | None = None,\n    sortName: str | None = None,\n    musicBrainzId: str | None = None,\n    genres: list[dict[str, Any]] | None = None,\n    artists: list[dict[str, Any]] | None = None,\n    displayArtist: str | None = None,\n    albumArtists: list[dict[str, Any]] | None = None,\n    displayAlbumArtist: str | None = None,\n    contributors: list[dict[str, Any]] | None = None,\n    displayComposer: str | None = None,\n    moods: list[str] | None = None,\n    replayGain: dict[str, Any] | None = None,\n    mediaType: str | None = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id: str = id\n    self.title: str | None = title\n    self.parent: str | None = parent\n    self.track: int | None = track\n    self.year: int | None = year\n    self.genre = Genre(self._subsonic, genre) if genre else None\n    self.size: int | None = size\n    self.content_type: str | None = contentType\n    self.suffix: str | None = suffix\n    self.transcoded_content_type: str | None = transcodedContentType\n    self.transcoded_suffix: str | None = transcodedSuffix\n    self.duration: int | None = duration\n    self.bit_rate: int | None = bitRate\n    self.path: str | None = path\n    self.user_rating: int | None = userRating\n    self.average_rating: float | None = averageRating\n    self.play_count: int | None = playCount\n    self.disc_number: int | None = discNumber\n    self.type: str | None = type\n    self.bookmark_position: int | None = bookmarkPosition\n    self.album = (\n        album_model_module.Album(self._subsonic, albumId, name=album)\n        if albumId\n        else None\n    )\n    self.artist = Artist(self._subsonic, artistId, artist) if artistId else None\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.created = parser.parse(created) if created else None\n    self.starred = parser.parse(starred) if starred else None\n    self.played = parser.parse(played) if played else None\n    self.bpm = bpm\n    self.comment = comment\n    self.sort_name = sortName\n    self.music_brainz_id = musicBrainzId\n    self.genres = (\n        [ItemGenre(self._subsonic, **genre) for genre in genres] if genres else None\n    )\n    self.artists = (\n        [Artist(self._subsonic, **artist) for artist in artists]\n        if artists\n        else None\n    )\n    self.display_artist = displayArtist\n    self.album_artists = (\n        [Artist(self._subsonic, **artist) for artist in albumArtists]\n        if albumArtists\n        else None\n    )\n    self.display_album_artist = displayAlbumArtist\n    self.contributors = (\n        [Contributor(self._subsonic, **contributor) for contributor in contributors]\n        if contributors\n        else None\n    )\n    self.display_composer = displayComposer\n    self.moods = moods\n    self.replay_gain = (\n        ReplayGain(self._subsonic, **replayGain) if replayGain else None\n    )\n    self.media_type = mediaType\n</code></pre>"},{"location":"reference/models/Song/#knuckles.models._song.Song.generate","title":"<code>generate()</code>","text":"<p>Return a new song object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Song</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def generate(self) -&gt; \"Song\":\n    \"\"\"Return a new song object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    return self._subsonic.browsing.get_song(self.id)\n</code></pre>"},{"location":"reference/models/Song/#knuckles.models._song.Song.remove_rating","title":"<code>remove_rating()</code>","text":"<p>Remove the rating for the song.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def remove_rating(self) -&gt; Self:\n    \"\"\"Remove the rating for the song.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.media_annotation.remove_rating(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Song/#knuckles.models._song.Song.scrobble","title":"<code>scrobble(time, submission=True)</code>","text":"<p>Scrobble the song.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>datetime</code> <p>The timestamp when the song was scrobble:</p> required <code>submission</code> <code>bool</code> <p>If the scrobble is a request to a submission or it is a now playing entry.</p> <code>True</code> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def scrobble(self, time: datetime, submission: bool = True) -&gt; Self:\n    \"\"\"Scrobble the song.\n\n    Args:\n        time: The timestamp when the song was scrobble:\n        submission: If the scrobble is a request to a submission or\n            it is a now playing entry.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.media_annotation.scrobble([self.id], [time], submission)\n\n    return self\n</code></pre>"},{"location":"reference/models/Song/#knuckles.models._song.Song.set_rating","title":"<code>set_rating(rating)</code>","text":"<p>Set the rating of the song.</p> <p>Parameters:</p> Name Type Description Default <code>rating</code> <code>int</code> <p>The new rating for the song.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def set_rating(self, rating: int) -&gt; Self:\n    \"\"\"Set the rating of the song.\n\n    Args:\n        rating: The new rating for the song.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.media_annotation.set_rating(self.id, rating)\n\n    return self\n</code></pre>"},{"location":"reference/models/Song/#knuckles.models._song.Song.star","title":"<code>star()</code>","text":"<p>Star the song for the authenticated user.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def star(self) -&gt; Self:\n    \"\"\"Star the song for the authenticated user.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.media_annotation.star_song(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Song/#knuckles.models._song.Song.unstar","title":"<code>unstar()</code>","text":"<p>Unstar the song for the authenticated user.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_song.py</code> <pre><code>def unstar(self) -&gt; Self:\n    \"\"\"Unstar the song for the authenticated user.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.media_annotation.unstar_song(self.id)\n\n    return self\n</code></pre>"},{"location":"reference/models/Starred%20Content/","title":"Starred Content","text":""},{"location":"reference/models/Starred%20Content/#knuckles.models._starred_content.StarredContent","title":"<code>StarredContent(subsonic, song=None, album=None, artist=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about starred content.</p> <p>Attributes:</p> Name Type Description <code>songs</code> <code>list[Song] | None</code> <p>List that holds all the info about all the starred songs.</p> <code>albums</code> <code>list[Album] | None</code> <p>List that holds all the info about all the starred albums.</p> <code>artists</code> <code>list[Artist] |\u00a0None</code> <p>List that holds all the info about all the starred artists.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_starred_content.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    song: list[dict[str, Any]] | None = None,\n    album: list[dict[str, Any]] | None = None,\n    artist: list[dict[str, Any]] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.songs = (\n        [Song(subsonic=self._subsonic, **song) for song in song] if song else None\n    )\n    self.albums = (\n        [Album(subsonic=self._subsonic, **album) for album in album]\n        if album\n        else None\n    )\n    self.artists = (\n        [Artist(subsonic=self._subsonic, **artist) for artist in artist]\n        if artist\n        else None\n    )\n</code></pre>"},{"location":"reference/models/System/","title":"System","text":""},{"location":"reference/models/System/#knuckles.models._system.License","title":"<code>License(subsonic, valid, email=None, licenseExpires=None, trialExpires=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about the license status of the server.</p> <p>Attributes:</p> Name Type Description <code>valid</code> <code>bool</code> <p>If the license of the server is valid.</p> <code>email</code> <code>str | None</code> <p>The email of the authenticated user.</p> <code>license_expires</code> <code>datetime | None</code> <p>The timestamp when the license expires.</p> <code>trial_expires</code> <code>datetime | None</code> <p>The timestamp when the trial expires if it has not already.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_system.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    valid: bool,\n    email: str | None = None,\n    licenseExpires: str | None = None,\n    trialExpires: str | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.valid: bool = valid\n    self.email: str | None = email\n\n    self.license_expires: datetime | None\n    if licenseExpires is not None:\n        self.license_expires = parser.parse(licenseExpires)\n    else:\n        self.license_expires = None\n\n    self.trial_expires: datetime | None\n    if trialExpires is not None:\n        self.trial_expires = parser.parse(trialExpires)\n    else:\n        self.trial_expires = None\n</code></pre>"},{"location":"reference/models/System/#knuckles.models._system.SubsonicResponse","title":"<code>SubsonicResponse(subsonic, status, version, type=None, serverVersion=None, openSubsonic=None, **kwargs)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the generic info about a response in a OpenSubsonic REST API call.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>str</code> <p>The status of the response, can be \"ok\" or \"failed\".</p> <code>version</code> <code>str</code> <p>The server supported version of the OpenSubonic REST API.</p> <code>type</code> <code>str | None</code> <p>The name of the server reported by itself.</p> <code>server_version</code> <code>str | None</code> <p>The server actual version.</p> <code>open_subsonic</code> <code>bool | None</code> <p>If the server supports OpenSubsonic REST API extensions.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_system.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    status: str,\n    version: str,\n    type: str | None = None,\n    serverVersion: str | None = None,\n    openSubsonic: bool | None = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.status = status\n    self.version = version\n    self.type = type\n    self.server_version = serverVersion\n    self.open_subsonic = openSubsonic\n</code></pre>"},{"location":"reference/models/User/","title":"User","text":""},{"location":"reference/models/User/#knuckles.models._user.User","title":"<code>User(subsonic, username, password=None, email=None, ldap_authenticated=None, admin_role=None, settings_role=None, stream_role=None, jukebox_role=None, download_role=None, upload_role=None, playlist_role=None, cover_art_role=None, comment_role=None, podcast_role=None, share_role=None, video_conversion_role=None, music_folder_id=None, max_bit_rate=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a user.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>The username of the user.</p> <code>password</code> <code>str\u00a0| None</code> <p>The password of the user.</p> <code>email</code> <code>str | None</code> <p>The email of the user.</p> <code>ldap_authenticated</code> <code>bool | None</code> <p>If the user is has been authenticated using LDAP.</p> <code>admin_role</code> <code>bool |\u00a0None</code> <p>If the user has access to admin functionalities.</p> <code>settings_role</code> <code>bool |\u00a0None</code> <p>If the user has access to change the settings of the server.</p> <code>stream_role</code> <code>bool |\u00a0None</code> <p>If the user has access to stream media.</p> <code>jukebox_role</code> <code>bool |\u00a0None</code> <p>If the user has access to control the jukebox.</p> <code>download_role</code> <code>bool |\u00a0None</code> <p>If the user has access to download media.</p> <code>upload_role</code> <code>bool |\u00a0None</code> <p>If the user has access to upload media.</p> <code>playlist_role</code> <code>bool |\u00a0None</code> <p>If the user has access to create, edit and delete playlists.</p> <code>cover_art_role</code> <code>bool |\u00a0None</code> <p>If the user has access to manipulate cover arts of media.</p> <code>comment_role</code> <code>bool |\u00a0None</code> <p>If the user has access to manipulate comments.</p> <code>podcast_role</code> <code>bool |\u00a0None</code> <p>If the user has access to manipulate podcasts.</p> <code>share_role</code> <code>bool |\u00a0None</code> <p>If the user has access to create, modify and delete shares.</p> <code>video_conversion_role</code> <code>bool |\u00a0None</code> <p>If the user is able to trigger video conversions.</p> <code>music_folder_id</code> <code>list[str] | None</code> <p>The IDs of the music folders where the user is able to access content from.</p> <code>max_bit_rate</code> <code>int | None</code> <p>The max bit rate the user can stream.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_user.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    username: str,\n    password: str | None = None,\n    email: str | None = None,\n    ldap_authenticated: bool | None = None,\n    admin_role: bool | None = None,\n    settings_role: bool | None = None,\n    stream_role: bool | None = None,\n    jukebox_role: bool | None = None,\n    download_role: bool | None = None,\n    upload_role: bool | None = None,\n    playlist_role: bool | None = None,\n    cover_art_role: bool | None = None,\n    comment_role: bool | None = None,\n    podcast_role: bool | None = None,\n    share_role: bool | None = None,\n    video_conversion_role: bool | None = None,\n    music_folder_id: list[str] | None = None,\n    max_bit_rate: int | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.username = username\n    self.password = password\n    self.email = email\n    self.ldap_authenticated = ldap_authenticated\n    self.admin_role = admin_role\n    self.settings_role = settings_role\n    self.stream_role = stream_role\n    self.jukebox_role = jukebox_role\n    self.download_role = download_role\n    self.upload_role = upload_role\n    self.playlist_role = playlist_role\n    self.cover_art_role = cover_art_role\n    self.comment_role = comment_role\n    self.podcast_role = podcast_role\n    self.share_role = share_role\n    self.video_conversion_role = video_conversion_role\n    self.music_folder_id = music_folder_id\n    self.max_bit_rate = max_bit_rate\n</code></pre>"},{"location":"reference/models/User/#knuckles.models._user.User.change_password","title":"<code>change_password(new_password)</code>","text":"<p>Change the password of the user.</p> <p>Parameters:</p> Name Type Description Default <code>new_password</code> <code>str</code> <p>The new password for the user</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_user.py</code> <pre><code>def change_password(self, new_password: str) -&gt; Self:\n    \"\"\"Change the password of the user.\n\n    Args:\n        new_password: The new password for the user\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.user_management.change_password(self.username, new_password)\n\n    return self\n</code></pre>"},{"location":"reference/models/User/#knuckles.models._user.User.create","title":"<code>create()</code>","text":"<p>Create a new user with the attributes of the model.</p> <p>Raises:</p> Type Description <code>MissingRequiredProperty</code> <p>Raised if a required property to create the user is missing.</p> <p>Returns:     The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_user.py</code> <pre><code>def create(self) -&gt; Self:\n    \"\"\"Create a new user with the attributes of the model.\n\n    Raises:\n        MissingRequiredProperty: Raised if a required property to create\n            the user is missing.\n    Returns:\n        The object itself.\n    \"\"\"\n\n    if not self.email:\n        raise MissingRequiredProperty(\n            \"You must provide an email in the email property of the model\"\n        )\n\n    if not self.password:\n        raise MissingRequiredProperty(\n            \"You must provide an password in the password property of the model\"\n        )\n\n    self._subsonic.user_management.create_user(\n        self.username,\n        self.password,\n        self.email,\n        self.ldap_authenticated,\n        self.admin_role,\n        self.settings_role,\n        self.stream_role,\n        self.jukebox_role,\n        self.download_role,\n        self.upload_role,\n        self.playlist_role,\n        self.cover_art_role,\n        self.comment_role,\n        self.podcast_role,\n        self.share_role,\n        self.video_conversion_role,\n        self.music_folder_id,\n        self.max_bit_rate,\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/User/#knuckles.models._user.User.delete","title":"<code>delete()</code>","text":"<p>Delete the user from the server.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_user.py</code> <pre><code>def delete(self) -&gt; Self:\n    \"\"\"Delete the user from the server.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.user_management.delete_user(self.username)\n\n    return self\n</code></pre>"},{"location":"reference/models/User/#knuckles.models._user.User.generate","title":"<code>generate()</code>","text":"<p>Return a new user object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>User</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_user.py</code> <pre><code>def generate(self) -&gt; \"User\":\n    \"\"\"Return a new user object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    return self._subsonic.user_management.get_user(self.username)\n</code></pre>"},{"location":"reference/models/User/#knuckles.models._user.User.update","title":"<code>update()</code>","text":"<p>Updates the info about the user in the server with the one in the model.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The object itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_user.py</code> <pre><code>def update(self) -&gt; Self:\n    \"\"\"Updates the info about the user in the server with\n    the one in the model.\n\n    Returns:\n        The object itself.\n    \"\"\"\n\n    self._subsonic.user_management.update_user(\n        self.username,\n        self.password,\n        self.email,\n        self.ldap_authenticated,\n        self.admin_role,\n        self.settings_role,\n        self.stream_role,\n        self.jukebox_role,\n        self.download_role,\n        self.upload_role,\n        self.playlist_role,\n        self.cover_art_role,\n        self.comment_role,\n        self.podcast_role,\n        self.share_role,\n        self.video_conversion_role,\n        self.music_folder_id,\n        self.max_bit_rate,\n    )\n\n    return self\n</code></pre>"},{"location":"reference/models/Video/","title":"Video","text":""},{"location":"reference/models/Video/#knuckles.models._video.AudioTrack","title":"<code>AudioTrack(subsonic, id, name=None, languageCode=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about an audio track.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the audio track.</p> <code>name</code> <code>str | None</code> <p>The name of the audio track.</p> <code>language_code</code> <code>str | None</code> <p>The code of the language in which the audio track is in.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_video.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    name: str | None = None,\n    languageCode: str | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n    self.language_code = languageCode\n</code></pre>"},{"location":"reference/models/Video/#knuckles.models._video.Captions","title":"<code>Captions(subsonic, id, name=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about captions:</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the captions.</p> <code>name</code> <code>str | None</code> <p>The ID of the captions.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_video.py</code> <pre><code>def __init__(self, subsonic: \"Subsonic\", id: str, name: str | None = None) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id = id\n    self.name = name\n</code></pre>"},{"location":"reference/models/Video/#knuckles.models._video.Video","title":"<code>Video(subsonic, id, title=None, parent=None, album=None, artist=None, track=None, year=None, genre=None, coverArt=None, size=None, contentType=None, suffix=None, transcodedContentType=None, transcodedSuffix=None, duration=None, bitRate=None, path=None, userRating=None, averageRating=None, playCount=None, discNumber=None, created=None, starred=None, albumId=None, artistId=None, type=None, bookmarkPosition=None, originalWidth=None, originalHeight=None, played=None, bpm=None, comment=None, sortName=None, musicBrainzId=None, genres=None, artists=None, displayArtist=None, albumArtists=None, displayAlbumArtist=None, contributors=None, displayComposer=None, moods=None, replayGain=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about a video.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the song.</p> <code>title</code> <code>str | None</code> <p>The title of the song.</p> <code>parent</code> <code>str | None</code> <p>The ID of the parent of the song.</p> <code>track</code> <code>int | None</code> <p>The track</p> <code>year</code> <code>int | None</code> <p>The year when the song was released.</p> <code>genre</code> <code>Genre | None</code> <p>All the info related with the genre of the song.</p> <code>size</code> <code>int | None</code> <p>The size of the file of the song.</p> <code>content_type</code> <code>str | None</code> <p>The HTTP ContentType of the file of the song.</p> <code>suffix</code> <code>str | None</code> <p>The suffix of the filename of the file of the song.</p> <code>transcoded_content_type</code> <code>str\u00a0| None</code> <p>The HTTP ContentType of the transcoded file of the song.</p> <code>transcoded_suffix</code> <code>str\u00a0| None</code> <p>The suffix of the filename of the transcoded file of the song.</p> <code>duration</code> <code>int | None</code> <p>The duration in seconds of the song.</p> <code>bit_rate</code> <code>int | None</code> <p>The bit rate of the song.</p> <code>path</code> <code>str\u00a0| None</code> <p>The path of the song.</p> <code>user_rating</code> <code>int | None</code> <p>The rating given to the song by the user.</p> <code>average_rating</code> <code>float | None</code> <p>The average rating of all the user for the song.</p> <code>play_count</code> <code>int | None</code> <p>The number of the times the song has been played.</p> <code>disc_number</code> <code>int | None</code> <p>The disc number of the song.</p> <code>type</code> <code>str\u00a0|  None</code> <p>The type of media.</p> <code>bookmark_position</code> <code>int | None</code> <p>The position in seconds where the song is bookmarked for the authenticated user.</p> <code>album</code> <code>Album | None</code> <p>All the info related with the album of the song.</p> <code>artist</code> <code>Artist\u00a0| None</code> <p>All the info related with the main artist of the song.</p> <code>cover_art</code> <code>CoverArt | None</code> <p>All the info related with the cover art of the song.</p> <code>created</code> <code>datetime | None</code> <p>The timestamp when the song was created.</p> <code>starred</code> <code>datetime | None</code> <p>The timestamp when the song was starred by the authenticated user if they have.</p> <code>played</code> <code>datetime\u00a0| None</code> <p>The timestamp when the song was last played.</p> <code>bpm</code> <code>int | None</code> <p>The bpm of the song.</p> <code>comment</code> <code>str |\u00a0None</code> <p>The comment of the song.</p> <code>sort_name</code> <code>str\u00a0| None</code> <p>The sort name of the song.</p> <code>music_brainz_id</code> <code>str\u00a0| None</code> <p>The ID of the MusicBrainz entry of the song.</p> <code>genres</code> <code>list[ItemGenre |\u00a0None</code> <p>List that holds all the info about all the genres of the song.</p> <code>artists</code> <code>list[Artist] |\u00a0None</code> <p>List that holds all the info about all the artists that made the song.</p> <code>display_artist</code> <code>str | None</code> <p>The display name of the artist of the song.</p> <code>album_artists</code> <code>list[Artist] | None</code> <p>List that holds all the info about all the artists that made the album where the song is from.</p> <code>display_album_artist</code> <code>str |\u00a0None</code> <p>THe display name of the artist of the album of the song.</p> <code>contributors</code> <code>list[Contributor] | None</code> <p>List that holds all the info about all the contributors of the song.</p> <code>display_composer</code> <code>str\u00a0|\u00a0None</code> <p>The display name of the composer of the song.</p> <code>moods</code> <code>list[str] |\u00a0None</code> <p>List off all the moods of the song.</p> <code>replay_gain</code> <code>ReplayGain | None</code> <p>All the info about the replay gain of the song.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_video.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    id: str,\n    title: str | None = None,\n    parent: str | None = None,\n    album: str | None = None,\n    artist: str | None = None,\n    track: int | None = None,\n    year: int | None = None,\n    genre: str | None = None,\n    coverArt: str | None = None,\n    size: int | None = None,\n    contentType: str | None = None,\n    suffix: str | None = None,\n    transcodedContentType: str | None = None,\n    transcodedSuffix: str | None = None,\n    duration: int | None = None,\n    bitRate: int | None = None,\n    path: str | None = None,\n    userRating: int | None = None,\n    averageRating: float | None = None,\n    playCount: int | None = None,\n    discNumber: int | None = None,\n    created: str | None = None,\n    starred: str | None = None,\n    albumId: str | None = None,\n    artistId: str | None = None,\n    type: str | None = None,\n    bookmarkPosition: int | None = None,\n    originalWidth: None = None,\n    originalHeight: None = None,\n    played: str | None = None,\n    bpm: int | None = None,\n    comment: str | None = None,\n    sortName: str | None = None,\n    musicBrainzId: str | None = None,\n    genres: list[dict[str, Any]] | None = None,\n    artists: list[dict[str, Any]] | None = None,\n    displayArtist: str | None = None,\n    albumArtists: list[dict[str, Any]] | None = None,\n    displayAlbumArtist: str | None = None,\n    contributors: list[dict[str, Any]] | None = None,\n    displayComposer: str | None = None,\n    moods: list[str] | None = None,\n    replayGain: dict[str, Any] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.id: str = id\n    self.title: str | None = title\n    self.parent: str | None = parent\n    self.track: int | None = track\n    self.year: int | None = year\n    self.genre = Genre(self._subsonic, genre) if genre else None\n    self.size: int | None = size\n    self.content_type: str | None = contentType\n    self.suffix: str | None = suffix\n    self.transcoded_content_type: str | None = transcodedContentType\n    self.transcoded_suffix: str | None = transcodedSuffix\n    self.duration: int | None = duration\n    self.bit_rate: int | None = bitRate\n    self.path: str | None = path\n    self.user_rating: int | None = userRating\n    self.average_rating: float | None = averageRating\n    self.play_count: int | None = playCount\n    self.disc_number: int | None = discNumber\n    self.type: str | None = type\n    self.bookmark_position: int | None = bookmarkPosition\n    self.album = (\n        album_model_module.Album(self._subsonic, albumId, name=album)\n        if albumId\n        else None\n    )\n    self.artist = Artist(self._subsonic, artistId, artist) if artistId else None\n    self.cover_art = CoverArt(self._subsonic, coverArt) if coverArt else None\n    self.created = parser.parse(created) if created else None\n    self.starred = parser.parse(starred) if starred else None\n    self.played = parser.parse(played) if played else None\n    self.bpm = bpm\n    self.comment = comment\n    self.sort_name = sortName\n    self.music_brainz_id = musicBrainzId\n    self.genres = (\n        [ItemGenre(self._subsonic, **genre) for genre in genres] if genres else None\n    )\n    self.artists = (\n        [Artist(self._subsonic, **artist) for artist in artists]\n        if artists\n        else None\n    )\n    self.display_artist = displayArtist\n    self.album_artists = (\n        [Artist(self._subsonic, **artist) for artist in albumArtists]\n        if albumArtists\n        else None\n    )\n    self.display_album_artist = displayAlbumArtist\n    self.contributors = (\n        [Contributor(self._subsonic, **contributor) for contributor in contributors]\n        if contributors\n        else None\n    )\n    self.display_composer = displayComposer\n    self.moods = moods\n    self.replay_gain = (\n        ReplayGain(self._subsonic, **replayGain) if replayGain else None\n    )\n\n    self.info: VideoInfo | None = None\n</code></pre>"},{"location":"reference/models/Video/#knuckles.models._video.Video.generate","title":"<code>generate()</code>","text":"<p>Return a new video object with all the data updated from the API, using the endpoint that return the most information possible.</p> <p>Useful for making copies with updated data or updating the object itself with immutability, e.g., <code>foo = foo.generate()</code>.</p> <p>Returns:</p> Type Description <code>Video</code> <p>A new object with all the updated info.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_video.py</code> <pre><code>def generate(self) -&gt; \"Video\":\n    \"\"\"Return a new video object with all the data updated from the API,\n    using the endpoint that return the most information possible.\n\n    Useful for making copies with updated data or updating the object\n    itself with immutability, e.g., `foo = foo.generate()`.\n\n    Returns:\n        A new object with all the updated info.\n    \"\"\"\n\n    video = self._subsonic.browsing.get_video(self.id)\n\n    if video is None:\n        raise ResourceNotFound()\n\n    return video\n</code></pre>"},{"location":"reference/models/Video/#knuckles.models._video.Video.get_video_info","title":"<code>get_video_info()</code>","text":"<p>Get all the extra info about the video, it's set to the <code>info</code> attribute of the object.</p> <p>Returns:</p> Type Description <code>VideoInfo</code> <p>The extra info returned by the server.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_video.py</code> <pre><code>def get_video_info(self) -&gt; VideoInfo:\n    \"\"\"Get all the extra info about the video, it's\n    set to the `info` attribute of the object.\n\n    Returns:\n        The extra info returned by the server.\n    \"\"\"\n\n    self.info = self._subsonic.browsing.get_video_info(self.id)\n\n    return self.info\n</code></pre>"},{"location":"reference/models/Video/#knuckles.models._video.VideoInfo","title":"<code>VideoInfo(subsonic, video_id, id, captions=None, audioTrack=None, conversion=None)</code>","text":"<p>             Bases: <code>Model</code></p> <p>Object that holds all the info about extra video info.</p> <p>Attributes:</p> Name Type Description <code>video_id</code> <code>str</code> <p>The ID of the video where the extra info are from.</p> <code>id</code> <code>str</code> <p>The ID of the extra info.</p> <code>captions</code> <code>Captions |\u00a0None</code> <p>All the info about the captions of the video.</p> <code>conversion</code> <code>Video | None</code> <p>All the info about the converted video of this one.</p> <code>audio_tracks</code> <code>dict[str, AudioTrack] |\u00a0None</code> <p>A dict that holds all the info about the audio tracks of the video, with the key being the language code of the audio track and the value the info about the track itself.</p> Source code in <code>.venv/lib/python3.11/site-packages/knuckles/models/_video.py</code> <pre><code>def __init__(\n    self,\n    subsonic: \"Subsonic\",\n    video_id: str,\n    id: str,\n    captions: dict[str, Any] | None = None,\n    audioTrack: list[dict[str, Any]] | None = None,\n    conversion: dict[str, Any] | None = None,\n) -&gt; None:\n    super().__init__(subsonic)\n\n    self.video_id = video_id\n    self.id = id\n    self.captions = (\n        Captions(subsonic=self._subsonic, **captions) if captions else None\n    )\n    self.conversion = (\n        Video(subsonic=self._subsonic, **conversion) if conversion else None\n    )\n\n    self.audio_tracks: dict[str, AudioTrack] | None\n    if not audioTrack:\n        self.audio_track = None\n        return\n\n    self.audio_tracks = {}\n    for track in audioTrack:\n        language_code = track[\"languageCode\"]\n\n        del track[\"languageCode\"]\n        self.audio_tracks[language_code] = AudioTrack(\n            subsonic=self._subsonic, **track\n        )\n</code></pre>"}]}